import { Component, Input } from '@angular/core';
import { bem, getPropertyByPath } from '../utils';
export class NgAisHighlight {
    constructor() {
        this.tagName = 'em';
        this.cx = bem('Highlight');
    }
    get content() {
        if (this.attribute === 'highlighted') {
            return this.hit.highlighted
                ? this.replaceWithTagName(this.hit.highlighted)
                : this.hit.label;
        }
        if (this.hit.hasOwnProperty('_highlightResult')) {
            const attributeHighlighted = getPropertyByPath(this.hit._highlightResult, this.attribute);
            // check that the attributeHighlighted is a string
            if (attributeHighlighted !== undefined &&
                typeof attributeHighlighted.value === 'string') {
                return this.replaceWithTagName(attributeHighlighted.value);
            }
        }
        const fallback = getPropertyByPath(this.hit, this.attribute);
        if (!fallback) {
            console.warn(`Could not find attribute [${this.attribute}] into hit object, will display an empty string.`);
            return '';
        }
        return fallback;
    }
    replaceWithTagName(value) {
        return value
            .replace(new RegExp('<em>', 'g'), `<${this.tagName} class="${this.cx('highlighted')}">`)
            .replace(new RegExp('</em>', 'g'), `</${this.tagName}>`);
    }
}
NgAisHighlight.decorators = [
    { type: Component, args: [{
                selector: 'ais-highlight',
                template: `<span [class]="cx()" [innerHtml]="content"></span>`
            },] }
];
NgAisHighlight.propDecorators = {
    attribute: [{ type: Input }],
    hit: [{ type: Input }],
    tagName: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hpZ2hsaWdodC9oaWdobGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQU1sRCxNQUFNLE9BQU8sY0FBYztJQUozQjtRQU9XLFlBQU8sR0FBVyxJQUFJLENBQUM7UUFFaEMsT0FBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQThDeEIsQ0FBQztJQTVDQyxJQUFJLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssYUFBYSxFQUFFO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXO2dCQUN6QixDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO2dCQUMvQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDcEI7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDL0MsTUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FDZixDQUFDO1lBRUYsa0RBQWtEO1lBQ2xELElBQ0Usb0JBQW9CLEtBQUssU0FBUztnQkFDbEMsT0FBTyxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUM5QztnQkFDQSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1RDtTQUNGO1FBRUQsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sQ0FBQyxJQUFJLENBQ1YsNkJBQ0UsSUFBSSxDQUFDLFNBQ1Asa0RBQWtELENBQ25ELENBQUM7WUFFRixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWE7UUFDOUIsT0FBTyxLQUFLO2FBQ1QsT0FBTyxDQUNOLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFDdkIsSUFBSSxJQUFJLENBQUMsT0FBTyxXQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDdEQ7YUFDQSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFLG9EQUFvRDthQUMvRDs7O3dCQUVFLEtBQUs7a0JBQ0wsS0FBSztzQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYmVtLCBnZXRQcm9wZXJ0eUJ5UGF0aCB9IGZyb20gJy4uL3V0aWxzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWhpZ2hsaWdodCcsXG4gIHRlbXBsYXRlOiBgPHNwYW4gW2NsYXNzXT1cImN4KClcIiBbaW5uZXJIdG1sXT1cImNvbnRlbnRcIj48L3NwYW4+YCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNIaWdobGlnaHQge1xuICBASW5wdXQoKSBhdHRyaWJ1dGU6IHN0cmluZztcbiAgQElucHV0KCkgaGl0OiB7IF9oaWdobGlnaHRSZXN1bHQ/OiB7fTsgbGFiZWw/OiBzdHJpbmc7IGhpZ2hsaWdodGVkPzogc3RyaW5nIH07XG4gIEBJbnB1dCgpIHRhZ05hbWU6IHN0cmluZyA9ICdlbSc7XG5cbiAgY3ggPSBiZW0oJ0hpZ2hsaWdodCcpO1xuXG4gIGdldCBjb250ZW50KCkge1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZSA9PT0gJ2hpZ2hsaWdodGVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaGl0LmhpZ2hsaWdodGVkXG4gICAgICAgID8gdGhpcy5yZXBsYWNlV2l0aFRhZ05hbWUodGhpcy5oaXQuaGlnaGxpZ2h0ZWQpXG4gICAgICAgIDogdGhpcy5oaXQubGFiZWw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGl0Lmhhc093blByb3BlcnR5KCdfaGlnaGxpZ2h0UmVzdWx0JykpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUhpZ2hsaWdodGVkID0gZ2V0UHJvcGVydHlCeVBhdGgoXG4gICAgICAgIHRoaXMuaGl0Ll9oaWdobGlnaHRSZXN1bHQsXG4gICAgICAgIHRoaXMuYXR0cmlidXRlXG4gICAgICApO1xuXG4gICAgICAvLyBjaGVjayB0aGF0IHRoZSBhdHRyaWJ1dGVIaWdobGlnaHRlZCBpcyBhIHN0cmluZ1xuICAgICAgaWYgKFxuICAgICAgICBhdHRyaWJ1dGVIaWdobGlnaHRlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVIaWdobGlnaHRlZC52YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlV2l0aFRhZ05hbWUoYXR0cmlidXRlSGlnaGxpZ2h0ZWQudmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGZhbGxiYWNrID0gZ2V0UHJvcGVydHlCeVBhdGgodGhpcy5oaXQsIHRoaXMuYXR0cmlidXRlKTtcbiAgICBpZiAoIWZhbGxiYWNrKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBDb3VsZCBub3QgZmluZCBhdHRyaWJ1dGUgWyR7XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGVcbiAgICAgICAgfV0gaW50byBoaXQgb2JqZWN0LCB3aWxsIGRpc3BsYXkgYW4gZW1wdHkgc3RyaW5nLmBcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cblxuICByZXBsYWNlV2l0aFRhZ05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnJlcGxhY2UoXG4gICAgICAgIG5ldyBSZWdFeHAoJzxlbT4nLCAnZycpLFxuICAgICAgICBgPCR7dGhpcy50YWdOYW1lfSBjbGFzcz1cIiR7dGhpcy5jeCgnaGlnaGxpZ2h0ZWQnKX1cIj5gXG4gICAgICApXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCc8L2VtPicsICdnJyksIGA8LyR7dGhpcy50YWdOYW1lfT5gKTtcbiAgfVxufVxuIl19