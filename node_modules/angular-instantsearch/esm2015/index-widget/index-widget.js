import { Component, Input, Inject, forwardRef, Optional, SkipSelf, } from '@angular/core';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import indexWidget from 'instantsearch.js/es/widgets/index/index';
import { isPlatformBrowser } from '@angular/common';
export class NgAisIndex {
    constructor(
    // public API does not include SkipSelf, but the index widget should accept parents, avoiding itself.
    parentIndex, instantSearchInstance) {
        this.parentIndex = parentIndex;
        this.instantSearchInstance = instantSearchInstance;
    }
    get parent() {
        if (this.parentIndex) {
            return this.parentIndex;
        }
        return this.instantSearchInstance;
    }
    createWidget() {
        this.widget = indexWidget({
            indexName: this.indexName,
            indexId: this.indexId,
        });
    }
    addWidgets(widgets) {
        this.widget.addWidgets(widgets);
    }
    removeWidgets(widgets) {
        this.widget.removeWidgets(widgets);
    }
    ngOnInit() {
        this.createWidget();
        this.parent.addWidgets([this.widget]);
    }
    ngOnDestroy() {
        if (isPlatformBrowser(this.instantSearchInstance.platformId)) {
            this.parent.removeWidgets([this.widget]);
        }
    }
}
NgAisIndex.decorators = [
    { type: Component, args: [{
                selector: 'ais-index',
                template: `<ng-content></ng-content>`
            },] }
];
NgAisIndex.ctorParameters = () => [
    { type: NgAisIndex, decorators: [{ type: SkipSelf }, { type: Inject, args: [forwardRef(() => NgAisIndex),] }, { type: Optional }] },
    { type: NgAisInstantSearch, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisIndex.propDecorators = {
    indexName: [{ type: Input }],
    indexId: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtd2lkZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2luZGV4LXdpZGdldC9pbmRleC13aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IsUUFBUSxHQUdULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sV0FHTixNQUFNLHlDQUF5QyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTXBELE1BQU0sT0FBTyxVQUFVO0lBTXJCO0lBQ0UscUdBQXFHO0lBSTlGLFdBQXVCLEVBRXZCLHFCQUF5QztRQUZ6QyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUV2QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW9CO0lBQy9DLENBQUM7SUFFSixJQUFJLE1BQU07UUFDUixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7SUFDcEMsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQztZQUN4QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxVQUFVLENBQUMsT0FBaUI7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLGFBQWEsQ0FBQyxPQUFpQjtRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDTSxXQUFXO1FBQ2hCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs7WUFsREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDOzs7WUFZdUIsVUFBVSx1QkFIN0IsUUFBUSxZQUNSLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQ25DLFFBQVE7WUFyQkosa0JBQWtCLHVCQXVCdEIsTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7O3dCQVg3QyxLQUFLO3NCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWYsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy90eXBlcyc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IGluZGV4V2lkZ2V0LCB7XG4gIEluZGV4V2lkZ2V0LFxuICBJbmRleFdpZGdldFBhcmFtcyxcbn0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy93aWRnZXRzL2luZGV4L2luZGV4JztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWluZGV4JyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNJbmRleCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcHVibGljIGluZGV4TmFtZTogSW5kZXhXaWRnZXRQYXJhbXNbJ2luZGV4TmFtZSddO1xuICBASW5wdXQoKSBwdWJsaWMgaW5kZXhJZD86IEluZGV4V2lkZ2V0UGFyYW1zWydpbmRleElkJ107XG5cbiAgcHVibGljIHdpZGdldD86IEluZGV4V2lkZ2V0O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIHB1YmxpYyBBUEkgZG9lcyBub3QgaW5jbHVkZSBTa2lwU2VsZiwgYnV0IHRoZSBpbmRleCB3aWRnZXQgc2hvdWxkIGFjY2VwdCBwYXJlbnRzLCBhdm9pZGluZyBpdHNlbGYuXG4gICAgQFNraXBTZWxmKClcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbmRleCkpXG4gICAgQE9wdGlvbmFsKClcbiAgICBwdWJsaWMgcGFyZW50SW5kZXg6IE5nQWlzSW5kZXgsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hJbnN0YW5jZTogTmdBaXNJbnN0YW50U2VhcmNoXG4gICkge31cblxuICBnZXQgcGFyZW50KCkge1xuICAgIGlmICh0aGlzLnBhcmVudEluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnRJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlO1xuICB9XG5cbiAgY3JlYXRlV2lkZ2V0KCkge1xuICAgIHRoaXMud2lkZ2V0ID0gaW5kZXhXaWRnZXQoe1xuICAgICAgaW5kZXhOYW1lOiB0aGlzLmluZGV4TmFtZSxcbiAgICAgIGluZGV4SWQ6IHRoaXMuaW5kZXhJZCxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRXaWRnZXRzKHdpZGdldHM6IFdpZGdldFtdKSB7XG4gICAgdGhpcy53aWRnZXQuYWRkV2lkZ2V0cyh3aWRnZXRzKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVXaWRnZXRzKHdpZGdldHM6IFdpZGdldFtdKSB7XG4gICAgdGhpcy53aWRnZXQucmVtb3ZlV2lkZ2V0cyh3aWRnZXRzKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KCk7XG4gICAgdGhpcy5wYXJlbnQuYWRkV2lkZ2V0cyhbdGhpcy53aWRnZXRdKTtcbiAgfVxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLnBhcmVudC5yZW1vdmVXaWRnZXRzKFt0aGlzLndpZGdldF0pO1xuICAgIH1cbiAgfVxufVxuIl19