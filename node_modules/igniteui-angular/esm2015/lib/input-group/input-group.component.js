import { CommonModule, DOCUMENT } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, HostBinding, HostListener, Input, NgModule, Inject, Optional, ChangeDetectorRef, } from '@angular/core';
import { IgxHintDirective } from '../directives/hint/hint.directive';
import { IgxInputDirective, IgxInputState, } from '../directives/input/input.directive';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxIconModule } from '../icon/public_api';
import { IgxPrefixModule } from '../directives/prefix/prefix.directive';
import { IgxSuffixModule } from '../directives/suffix/suffix.directive';
import { DisplayDensity, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';
import { IgxInputGroupBase } from './input-group.common';
import { IGX_INPUT_GROUP_TYPE } from './inputGroupType';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { mkenum, PlatformUtil } from '../core/utils';
import { Subject } from 'rxjs';
const IgxInputGroupTheme = mkenum({
    Material: 'material',
    Fluent: 'fluent',
    Bootstrap: 'bootstrap',
    IndigoDesign: 'indigo-design'
});
export class IgxInputGroupComponent extends DisplayDensityBase {
    constructor(element, _displayDensityOptions, _inputGroupType, document, platform, cdr) {
        super(_displayDensityOptions);
        this.element = element;
        this._inputGroupType = _inputGroupType;
        this.document = document;
        this.platform = platform;
        this.cdr = cdr;
        /**
         * Property that enables/disables the auto-generated class of the `IgxInputGroupComponent`.
         * By default applied the class is applied.
         * ```typescript
         *  @ViewChild("MyInputGroup")
         *  public inputGroup: IgxInputGroupComponent;
         *  ngAfterViewInit(){
         *  this.inputGroup.defaultClass = false;
         * ```
         * }
         */
        this.defaultClass = true;
        /** @hidden */
        this.hasPlaceholder = false;
        /** @hidden */
        this.isRequired = false;
        /** @hidden */
        this.isFocused = false;
        /**
         * @hidden @internal
         * When truthy, disables the `IgxInputGroupComponent`.
         * Controlled by the underlying `IgxInputDirective`.
         * ```html
         * <igx-input-group [disabled]="true"></igx-input-group>
         * ```
         */
        this.disabled = false;
        /**
         * Prevents automatically focusing the input when clicking on other elements in the input group (e.g. prefix or suffix).
         *
         * @remarks Automatic focus causes software keyboard to show on mobile devices.
         *
         * @example
         * ```html
         * <igx-input-group [suppressInputAutofocus]="true"></igx-input-group>
         * ```
         */
        this.suppressInputAutofocus = false;
        /** @hidden */
        this.hasWarning = false;
        this._type = null;
        this._filled = false;
        this._theme$ = new Subject();
        this._resourceStrings = CurrentResourceStrings.InputResStrings;
        this._subscription = this._theme$.asObservable().subscribe(value => {
            this._theme = value;
            this.cdr.detectChanges();
        });
    }
    /**
     * Sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * Returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /** @hidden */
    get validClass() {
        return this.input.valid === IgxInputState.VALID;
    }
    /** @hidden */
    get invalidClass() {
        return this.input.valid === IgxInputState.INVALID;
    }
    /** @hidden */
    get isFilled() {
        return this._filled || (this.input && this.input.value);
    }
    /** @hidden */
    get isDisplayDensityCosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    /** @hidden */
    get isDisplayDensityComfortable() {
        return this.displayDensity === DisplayDensity.comfortable;
    }
    /** @hidden */
    get isDisplayDensityCompact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    /**
     * An @Input property that sets how the input will be styled.
     * Allowed values of type IgxInputGroupType.
     * ```html
     * <igx-input-group [type]="'search'">
     * ```
     */
    set type(value) {
        this._type = value;
    }
    /**
     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.
     * The default is `line`.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputType = this.inputGroup.type;
     * }
     * ```
     */
    get type() {
        return this._type || this._inputGroupType || 'line';
    }
    /**
     * Sets the theme of the input.
     * Allowed values of type IgxInputGroupTheme.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit() {
     *  let inputTheme = 'fluent';
     * }
     */
    set theme(value) {
        this._theme = value;
    }
    /**
     * Returns the theme of the input.
     * The returned value is of type IgxInputGroupType.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit() {
     *  let inputTheme = this.inputGroup.theme;
     * }
     */
    get theme() {
        return this._theme;
    }
    /** @hidden */
    onClick(event) {
        if (!this.isFocused &&
            event.target !== this.input.nativeElement &&
            !this.suppressInputAutofocus) {
            this.input.focus();
        }
    }
    /** @hidden */
    onPointerDown(event) {
        if (this.isFocused && event.target !== this.input.nativeElement) {
            event.preventDefault();
        }
    }
    /** @hidden @internal */
    hintClickHandler(event) {
        event.stopPropagation();
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has hints.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputHints = this.inputGroup.hasHints;
     * }
     * ```
     */
    get hasHints() {
        return this.hints.length > 0;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has border.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputBorder = this.inputGroup.hasBorder;
     * }
     * ```
     */
    get hasBorder() {
        return ((this.type === 'line' || this.type === 'box') &&
            this._theme === 'material');
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is line.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeLine = this.inputGroup.isTypeLine;
     * }
     * ```
     */
    get isTypeLine() {
        return this.type === 'line' && this._theme === 'material';
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is box.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBox = this.inputGroup.isTypeBox;
     * }
     * ```
     */
    get isTypeBox() {
        return this.type === 'box' && this._theme === 'material';
    }
    /** @hidden @internal */
    uploadButtonHandler() {
        this.input.nativeElement.click();
    }
    /** @hidden @internal */
    clearValueHandler() {
        this.input.clear();
    }
    /** @hidden @internal */
    get isFileType() {
        return this.input.type === 'file';
    }
    /** @hidden @internal */
    get fileNames() {
        return this.input.fileNames || this._resourceStrings.igx_input_file_placeholder;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is border.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBorder = this.inputGroup.isTypeBorder;
     * }
     * ```
     */
    get isTypeBorder() {
        return this.type === 'border' && this._theme === 'material';
    }
    /**
     * Returns true if the `IgxInputGroupComponent` theme is Fluent.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeFluent = this.inputGroup.isTypeFluent;
     * }
     * ```
     */
    get isTypeFluent() {
        return this._theme === 'fluent';
    }
    /**
     * Returns true if the `IgxInputGroupComponent` theme is Bootstrap.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;
     * }
     * ```
     */
    get isTypeBootstrap() {
        return this._theme === 'bootstrap';
    }
    /**
     * Returns true if the `IgxInputGroupComponent` theme is Indigo.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeIndigo = this.inputGroup.isTypeIndigo;
     * }
     * ```
     */
    get isTypeIndigo() {
        return this._theme === 'indigo-design';
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is search.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeSearch = this.inputGroup.isTypeSearch;
     * }
     * ```
     */
    get isTypeSearch() {
        return this.type === 'search';
    }
    /** @hidden */
    get filled() {
        return this._filled;
    }
    /** @hidden */
    set filled(val) {
        this._filled = val;
    }
    /** @hidden @internal */
    ngAfterViewChecked() {
        if (!this._theme) {
            if (this.platform.isIE) {
                Promise.resolve().then(() => {
                    this._theme$.next(IgxInputGroupTheme.Material);
                });
            }
            else {
                const cssProp = this.document.defaultView
                    .getComputedStyle(this.element.nativeElement)
                    .getPropertyValue('--theme')
                    .trim();
                if (cssProp !== '') {
                    Promise.resolve().then(() => {
                        this._theme$.next(cssProp);
                    });
                }
            }
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
}
IgxInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-input-group',
                template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n\n<div class=\"igx-input-group__hint\" (click)=\"hintClickHandler($event)\">\n    <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #prefix>\n    <ng-content select=\"igx-prefix, [igxPrefix]\"></ng-content>\n</ng-template>\n\n<ng-template #uploadButton>\n    <igx-prefix *ngIf=\"isFileType\">\n        <button\n            igxButton=\"raised\"\n            (click)=\"uploadButtonHandler()\"\n            [displayDensity]=\"displayDensity\"\n            [disabled]=\"disabled\"\n            [ngClass]=\"{ 'igx-input-group__upload-button': isTypeLine }\"\n        >\n            {{ resourceStrings.igx_input_upload_button }}\n        </button>\n    </igx-prefix>\n</ng-template>\n\n<ng-template #files>\n    <div\n        *ngIf=\"isFileType\"\n        class=\"igx-input-group__file-input\"\n        [title]=\"fileNames\"\n    >\n        <span>{{ fileNames }}</span>\n    </div>\n</ng-template>\n\n<ng-template #clear>\n    <igx-suffix\n        class=\"igx-input-group__clear-icon\"\n        *ngIf=\"isFileType && isFilled\"\n        (click)=\"clearValueHandler()\"\n        (keydown.Enter)=\"clearValueHandler()\"\n        title=\"clear files\"\n        tabindex=\"0\"\n    >\n        <igx-icon>{{ resourceStrings.igx_input_clear_button }}</igx-icon>\n    </igx-suffix>\n</ng-template>\n\n<ng-template #suffix>\n    <ng-content select=\"igx-suffix, [igxSuffix]\"></ng-content>\n</ng-template>\n\n<ng-template #materialBundle>\n    <div class=\"igx-input-group__bundle\">\n        <ng-container *ngTemplateOutlet=\"prefix\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"uploadButton\"></ng-container>\n\n        <div class=\"igx-input-group__bundle-main\">\n            <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"files\"></ng-container>\n        </div>\n\n        <ng-container *ngTemplateOutlet=\"clear\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"suffix\"></ng-container>\n    </div>\n</ng-template>\n\n<ng-template #fluentBundle>\n    <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-container *ngTemplateOutlet=\"prefix\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"uploadButton\"></ng-container>\n\n        <div class=\"igx-input-group__bundle-main\">\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"files\"></ng-container>\n        </div>\n\n        <ng-container *ngTemplateOutlet=\"clear\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"suffix\"></ng-container>\n    </div>\n</ng-template>\n\n<ng-template #bootstrapBundle>\n    <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-container *ngTemplateOutlet=\"prefix\"></ng-container>\n\n        <ng-container *ngTemplateOutlet=\"uploadButton\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"files\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"clear\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"suffix\"></ng-container>\n    </div>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container [ngSwitch]=\"theme\">\n        <ng-container *ngSwitchCase=\"'bootstrap'\">\n            <ng-container *ngTemplateOutlet=\"bootstrapBundle\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'fluent'\">\n            <ng-container *ngTemplateOutlet=\"fluentBundle\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'indigo-design'\">\n            <ng-container *ngTemplateOutlet=\"fluentBundle\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"materialBundle\"></ng-container>\n        </ng-container>\n    </ng-container>\n</ng-template>\n",
                providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]
            },] }
];
IgxInputGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [IGX_INPUT_GROUP_TYPE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: PlatformUtil },
    { type: ChangeDetectorRef }
];
IgxInputGroupComponent.propDecorators = {
    resourceStrings: [{ type: Input }],
    defaultClass: [{ type: HostBinding, args: ['class.igx-input-group',] }],
    hasPlaceholder: [{ type: HostBinding, args: ['class.igx-input-group--placeholder',] }],
    isRequired: [{ type: HostBinding, args: ['class.igx-input-group--required',] }],
    isFocused: [{ type: HostBinding, args: ['class.igx-input-group--focused',] }],
    disabled: [{ type: HostBinding, args: ['class.igx-input-group--disabled',] }],
    suppressInputAutofocus: [{ type: Input }],
    hasWarning: [{ type: HostBinding, args: ['class.igx-input-group--warning',] }],
    hints: [{ type: ContentChildren, args: [IgxHintDirective, { read: IgxHintDirective },] }],
    input: [{ type: ContentChild, args: [IgxInputDirective, { read: IgxInputDirective, static: true },] }],
    validClass: [{ type: HostBinding, args: ['class.igx-input-group--valid',] }],
    invalidClass: [{ type: HostBinding, args: ['class.igx-input-group--invalid',] }],
    isFilled: [{ type: HostBinding, args: ['class.igx-input-group--filled',] }],
    isDisplayDensityCosy: [{ type: HostBinding, args: ['class.igx-input-group--cosy',] }],
    isDisplayDensityComfortable: [{ type: HostBinding, args: ['class.igx-input-group--comfortable',] }],
    isDisplayDensityCompact: [{ type: HostBinding, args: ['class.igx-input-group--compact',] }],
    type: [{ type: Input, args: ['type',] }],
    theme: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onPointerDown: [{ type: HostListener, args: ['pointerdown', ['$event'],] }],
    isTypeBox: [{ type: HostBinding, args: ['class.igx-input-group--box',] }],
    isFileType: [{ type: HostBinding, args: ['class.igx-input-group--file',] }],
    isTypeBorder: [{ type: HostBinding, args: ['class.igx-input-group--border',] }],
    isTypeFluent: [{ type: HostBinding, args: ['class.igx-input-group--fluent',] }],
    isTypeBootstrap: [{ type: HostBinding, args: ['class.igx-input-group--bootstrap',] }],
    isTypeIndigo: [{ type: HostBinding, args: ['class.igx-input-group--indigo',] }],
    isTypeSearch: [{ type: HostBinding, args: ['class.igx-input-group--search',] }]
};
/** @hidden */
export class IgxInputGroupModule {
}
IgxInputGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IgxInputGroupComponent,
                    IgxHintDirective,
                    IgxInputDirective,
                    IgxLabelDirective,
                ],
                exports: [
                    IgxInputGroupComponent,
                    IgxHintDirective,
                    IgxInputDirective,
                    IgxLabelDirective,
                    IgxPrefixModule,
                    IgxSuffixModule,
                    IgxButtonModule,
                    IgxIconModule
                ],
                imports: [CommonModule, IgxPrefixModule, IgxSuffixModule, IgxButtonModule, IgxIconModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,