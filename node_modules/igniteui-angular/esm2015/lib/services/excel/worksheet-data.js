import { HeaderType, ExportRecordType } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetDataDictionary } from './worksheet-data-dictionary';
/** @hidden */
export class WorksheetData {
    constructor(_data, options, sort, columnCount, rootKeys, indexOfLastPinnedColumn, columnWidths, owner, owners) {
        this._data = _data;
        this.options = options;
        this.sort = sort;
        this.columnCount = columnCount;
        this.rootKeys = rootKeys;
        this.indexOfLastPinnedColumn = indexOfLastPinnedColumn;
        this.columnWidths = columnWidths;
        this.owner = owner;
        this.owners = owners;
        this.initializeData();
    }
    get data() {
        return this._data;
    }
    get rowCount() {
        return this._rowCount;
    }
    get isEmpty() {
        return !this.rowCount || !this.columnCount;
    }
    get isSpecialData() {
        return this._isSpecialData;
    }
    get dataDictionary() {
        return this._dataDictionary;
    }
    initializeData() {
        if (!this._data || this._data.length === 0) {
            return;
        }
        const isMultiColumnHeader = this.owner.columns.some(col => !col.skip && col.headerType === HeaderType.MultiColumnHeader);
        const hasHierarchicalGridRecord = this._data[0].type === ExportRecordType.HierarchicalGridRecord;
        if (hasHierarchicalGridRecord || (isMultiColumnHeader && !this.options.ignoreMultiColumnHeaders)) {
            this.options.exportAsTable = false;
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data[0].data);
        this._rowCount = this._data.length + 1;
        this._dataDictionary = new WorksheetDataDictionary(this.columnCount, this.options.columnWidth, this.columnWidths);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NoZWV0LWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZXhjZWwvd29ya3NoZWV0LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBOEIsTUFBTSx3Q0FBd0MsQ0FBQztBQUNsSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdEUsY0FBYztBQUNkLE1BQU0sT0FBTyxhQUFhO0lBS3RCLFlBQW9CLEtBQXNCLEVBQ3ZCLE9BQWdDLEVBQ2hDLElBQVMsRUFDVCxXQUFtQixFQUNuQixRQUFrQixFQUNsQix1QkFBK0IsRUFDL0IsWUFBc0IsRUFDdEIsS0FBa0IsRUFDbEIsTUFBNkI7UUFSNUIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFDaEMsU0FBSSxHQUFKLElBQUksQ0FBSztRQUNULGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFRO1FBQy9CLGlCQUFZLEdBQVosWUFBWSxDQUFVO1FBQ3RCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pILE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7UUFFakcsSUFBSSx5QkFBeUIsSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1lBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0SCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZWFkZXJUeXBlLCBFeHBvcnRSZWNvcmRUeXBlLCBJQ29sdW1uTGlzdCwgSUV4cG9ydFJlY29yZCB9IGZyb20gJy4uL2V4cG9ydGVyLWNvbW1vbi9iYXNlLWV4cG9ydC1zZXJ2aWNlJztcbmltcG9ydCB7IEV4cG9ydFV0aWxpdGllcyB9IGZyb20gJy4uL2V4cG9ydGVyLWNvbW1vbi9leHBvcnQtdXRpbGl0aWVzJztcbmltcG9ydCB7IElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zIH0gZnJvbSAnLi9leGNlbC1leHBvcnRlci1vcHRpb25zJztcbmltcG9ydCB7IFdvcmtzaGVldERhdGFEaWN0aW9uYXJ5IH0gZnJvbSAnLi93b3Jrc2hlZXQtZGF0YS1kaWN0aW9uYXJ5JztcblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBjbGFzcyBXb3Jrc2hlZXREYXRhIHtcbiAgICBwcml2YXRlIF9yb3dDb3VudDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2RhdGFEaWN0aW9uYXJ5OiBXb3Jrc2hlZXREYXRhRGljdGlvbmFyeTtcbiAgICBwcml2YXRlIF9pc1NwZWNpYWxEYXRhOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZGF0YTogSUV4cG9ydFJlY29yZFtdLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBvcHRpb25zOiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgc29ydDogYW55LFxuICAgICAgICAgICAgICAgIHB1YmxpYyBjb2x1bW5Db3VudDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHB1YmxpYyByb290S2V5czogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgcHVibGljIGluZGV4T2ZMYXN0UGlubmVkQ29sdW1uOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbHVtbldpZHRoczogbnVtYmVyW10sXG4gICAgICAgICAgICAgICAgcHVibGljIG93bmVyOiBJQ29sdW1uTGlzdCxcbiAgICAgICAgICAgICAgICBwdWJsaWMgb3duZXJzOiBNYXA8YW55LCBJQ29sdW1uTGlzdD4pIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRhdGEoKTogSUV4cG9ydFJlY29yZFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCByb3dDb3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm93Q291bnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMucm93Q291bnQgfHwgIXRoaXMuY29sdW1uQ291bnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc1NwZWNpYWxEYXRhKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTcGVjaWFsRGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRhdGFEaWN0aW9uYXJ5KCk6IFdvcmtzaGVldERhdGFEaWN0aW9uYXJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFEaWN0aW9uYXJ5O1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZURhdGEoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YSB8fCB0aGlzLl9kYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNNdWx0aUNvbHVtbkhlYWRlciA9IHRoaXMub3duZXIuY29sdW1ucy5zb21lKGNvbCA9PiAhY29sLnNraXAgJiYgY29sLmhlYWRlclR5cGUgPT09IEhlYWRlclR5cGUuTXVsdGlDb2x1bW5IZWFkZXIpO1xuICAgICAgICBjb25zdCBoYXNIaWVyYXJjaGljYWxHcmlkUmVjb3JkID0gdGhpcy5fZGF0YVswXS50eXBlID09PSBFeHBvcnRSZWNvcmRUeXBlLkhpZXJhcmNoaWNhbEdyaWRSZWNvcmQ7XG5cbiAgICAgICAgaWYgKGhhc0hpZXJhcmNoaWNhbEdyaWRSZWNvcmQgfHwgKGlzTXVsdGlDb2x1bW5IZWFkZXIgJiYgIXRoaXMub3B0aW9ucy5pZ25vcmVNdWx0aUNvbHVtbkhlYWRlcnMpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZXhwb3J0QXNUYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNTcGVjaWFsRGF0YSA9IEV4cG9ydFV0aWxpdGllcy5pc1NwZWNpYWxEYXRhKHRoaXMuX2RhdGFbMF0uZGF0YSk7XG4gICAgICAgIHRoaXMuX3Jvd0NvdW50ID0gdGhpcy5fZGF0YS5sZW5ndGggKyAxO1xuICAgICAgICB0aGlzLl9kYXRhRGljdGlvbmFyeSA9IG5ldyBXb3Jrc2hlZXREYXRhRGljdGlvbmFyeSh0aGlzLmNvbHVtbkNvdW50LCB0aGlzLm9wdGlvbnMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uV2lkdGhzKTtcbiAgICB9XG59XG4iXX0=