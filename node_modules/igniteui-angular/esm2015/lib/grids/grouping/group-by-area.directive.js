import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Pipe, ViewChildren } from '@angular/core';
import { IgxChipComponent } from '../../chips/public_api';
import { DisplayDensity } from '../../core/displayDensity';
import { PlatformUtil } from '../../core/utils';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
/**
 * An internal component representing a base group-by drop area.
 *
 * @hidden @internal
 */
export class IgxGroupByAreaDirective {
    constructor(ref, platform) {
        this.ref = ref;
        this.platform = platform;
        this.density = DisplayDensity.comfortable;
        this.defaultClass = true;
        this.expressionsChange = new EventEmitter();
        this._expressions = [];
    }
    get cosyStyle() {
        return this.density === 'cosy';
    }
    get compactStyle() {
        return this.density === 'compact';
    }
    /**
     * The group-by expressions provided by the parent grid.
     */
    get expressions() {
        return this._expressions;
    }
    set expressions(value) {
        this._expressions = value;
        this.chipExpressions = this._expressions;
        this.expressionsChanged();
        this.expressionsChange.emit(this._expressions);
    }
    /**
     * The default message for the default drop area template.
     * Obviously, if another template is provided, this is ignored.
     */
    get dropAreaMessage() {
        var _a;
        return (_a = this._dropAreaMessage) !== null && _a !== void 0 ? _a : this.grid.resourceStrings.igx_grid_groupByArea_message;
    }
    set dropAreaMessage(value) {
        this._dropAreaMessage = value;
    }
    /** The native DOM element. Used in sizing calculations. */
    get nativeElement() {
        return this.ref.nativeElement;
    }
    get dropAreaVisible() {
        return (this.grid.columnInDrag && this.grid.columnInDrag.groupable) ||
            !this.expressions.length;
    }
    handleKeyDown(id, event) {
        if (this.platform.isActivationKey(event)) {
            this.updateSorting(id);
        }
    }
    handleClick(id) {
        if (!this.grid.getColumnByName(id).groupable) {
            return;
        }
        this.updateSorting(id);
    }
    onDragDrop(event) {
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            const column = drag.column;
            if (this.grid.columns.indexOf(column) < 0) {
                return;
            }
            const isGrouped = this.expressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                const groupingExpression = {
                    fieldName: column.field,
                    dir: SortingDirection.Asc,
                    ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy,
                    groupingComparer: column.groupingComparer
                };
                this.groupBy(groupingExpression);
            }
        }
    }
    getReorderedExpressions(chipsArray) {
        const newExpressions = [];
        chipsArray.forEach(chip => {
            var _a;
            const expr = this.expressions.find(item => item.fieldName === chip.id);
            // disallow changing order if there are columns with groupable: false
            if (!((_a = this.grid.getColumnByName(expr.fieldName)) === null || _a === void 0 ? void 0 : _a.groupable)) {
                return;
            }
            newExpressions.push(expr);
        });
        return newExpressions;
    }
    updateSorting(id) {
        const expr = this.grid.sortingExpressions.find(e => e.fieldName === id);
        expr.dir = 3 - expr.dir;
        this.grid.sort(expr);
    }
    expressionsChanged() {
    }
}
IgxGroupByAreaDirective.decorators = [
    { type: Directive }
];
IgxGroupByAreaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: PlatformUtil }
];
IgxGroupByAreaDirective.propDecorators = {
    dropAreaTemplate: [{ type: Input }],
    density: [{ type: Input }],
    defaultClass: [{ type: HostBinding, args: ['class.igx-grid-grouparea',] }],
    cosyStyle: [{ type: HostBinding, args: ['class.igx-grid-grouparea--cosy',] }],
    compactStyle: [{ type: HostBinding, args: ['class.igx-grid-grouparea--compact',] }],
    grid: [{ type: Input }],
    expressions: [{ type: Input }],
    dropAreaMessage: [{ type: Input }],
    expressionsChange: [{ type: Output }],
    chips: [{ type: ViewChildren, args: [IgxChipComponent,] }]
};
/**
 * A pipe to circumvent the use of getters/methods just to get some additional
 * information from the grouping expression and pass it to the chip representing
 * that expression.
 *
 * @hidden @internal
 */
export class IgxGroupByMetaPipe {
    transform(key, grid) {
        const column = grid.getColumnByName(key);
        return { groupable: column.groupable, title: column.header || key };
    }
}
IgxGroupByMetaPipe.decorators = [
    { type: Pipe, args: [{ name: 'igxGroupByMeta' },] }
];
//# sourceMappingURL=data:application/json;base64,