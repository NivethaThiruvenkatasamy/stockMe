import { Pipe, Inject } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray, resolveNestedPath } from '../../core/utils';
import { ColumnDisplayOrder } from './enums';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
import { IgxAddRow } from './crud.service';
import { IgxGridRow } from '../grid-public-row';
/**
 * @hidden
 * @internal
 */
export class IgxGridCellStyleClassesPipe {
    transform(cssClasses, _, data, field, index, __) {
        if (!cssClasses) {
            return '';
        }
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            const callbackOrValue = cssClasses[cssClass];
            const apply = typeof callbackOrValue === 'function' ?
                callbackOrValue(data, field, resolveNestedPath(data, field), index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
}
IgxGridCellStyleClassesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxCellStyleClasses'
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridCellStylesPipe {
    transform(styles, _, data, field, index, __) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(data, field, resolveNestedPath(data, field), index) : res;
        }
        return css;
    }
}
IgxGridCellStylesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxCellStyles'
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridRowClassesPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
        this.row = new IgxGridRow(this.gridAPI.grid, -1, {});
    }
    transform(cssClasses, row, editMode, selected, dirty, deleted, dragging, index, mrl, filteredOut, _) {
        const result = new Set(['igx-grid__tr', index % 2 ? row.grid.evenRowCSS : row.grid.oddRowCSS]);
        const mapping = [
            [selected, 'igx-grid__tr--selected'],
            [editMode, 'igx-grid__tr--edit'],
            [dirty, 'igx-grid__tr--edited'],
            [deleted, 'igx-grid__tr--deleted'],
            [dragging, 'igx-grid__tr--drag'],
            [mrl, 'igx-grid__tr--mrl'],
            // Tree grid only
            [filteredOut, 'igx-grid__tr--filtered']
        ];
        for (const [state, _class] of mapping) {
            if (state) {
                result.add(_class);
            }
        }
        for (const cssClass of Object.keys(cssClasses !== null && cssClasses !== void 0 ? cssClasses : {})) {
            const callbackOrValue = cssClasses[cssClass];
            this.row.index = index;
            this.row._data = row.rowData;
            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(this.row) : callbackOrValue;
            if (apply) {
                result.add(cssClass);
            }
        }
        return result;
    }
}
IgxGridRowClassesPipe.decorators = [
    { type: Pipe, args: [{ name: 'igxGridRowClasses' },] }
];
IgxGridRowClassesPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridRowStylesPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(styles, rowData, index, __) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const cb = styles[prop];
            const row = new IgxGridRow(this.gridAPI.grid, index, rowData);
            css[prop] = typeof cb === 'function' ? cb(row) : cb;
        }
        return css;
    }
}
IgxGridRowStylesPipe.decorators = [
    { type: Pipe, args: [{ name: 'igxGridRowStyles' },] }
];
IgxGridRowStylesPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridNotGroupedPipe {
    transform(value) {
        return value.filter(item => !item.columnGroup);
    }
}
IgxGridNotGroupedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxNotGrouped'
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridTopLevelColumns {
    transform(value) {
        return value.filter(item => item.level === 0);
    }
}
IgxGridTopLevelColumns.decorators = [
    { type: Pipe, args: [{
                name: 'igxTopLevel'
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridFilterConditionPipe {
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
}
IgxGridFilterConditionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterCondition',
                pure: true
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridTransactionPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, _id, _pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            const result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    }
}
IgxGridTransactionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gridTransaction',
                pure: true
            },] }
];
IgxGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/**
 * @hidden
 * @internal
 */
export class IgxGridPaginatorOptionsPipe {
    transform(values) {
        return Array.from(new Set([...values])).sort((a, b) => a - b);
    }
}
IgxGridPaginatorOptionsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'paginatorOptions',
                pure: true,
            },] }
];
/**
 * @hidden
 * @internal
 */
export class IgxHasVisibleColumnsPipe {
    transform(values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    }
}
IgxHasVisibleColumnsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'visibleColumns',
                pure: true
            },] }
];
/**
 * @hidden
 */
export class IgxGridRowPinningPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, isPinned = false, _pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.hasPinnedRecords && isPinned) {
            const result = collection.filter(rec => !grid.isSummaryRow(rec) && grid.isRecordPinned(rec));
            result.sort((rec1, rec2) => grid.getInitialPinnedIndex(rec1) - grid.getInitialPinnedIndex(rec2));
            return result;
        }
        grid.unpinnedRecords = collection;
        if (!grid.hasPinnedRecords) {
            grid.pinnedRecords = [];
            return isPinned ? [] : collection;
        }
        return collection.map((rec) => !grid.isSummaryRow(rec) &&
            grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec);
    }
}
IgxGridRowPinningPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gridRowPinning',
                pure: true
            },] }
];
IgxGridRowPinningPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
export class IgxColumnActionEnabledPipe {
    constructor(columnActions) {
        this.columnActions = columnActions;
    }
    transform(collection, actionFilter, _pipeTrigger) {
        if (!collection) {
            return collection;
        }
        let copy = collection.slice(0);
        if (copy.length && copy[0].grid.hasColumnLayouts) {
            copy = copy.filter(c => c.columnLayout);
        }
        if (actionFilter) {
            copy = copy.filter(actionFilter);
        }
        // Preserve the actionable collection for use in the component
        this.columnActions.actionableColumns = copy;
        return copy;
    }
}
IgxColumnActionEnabledPipe.decorators = [
    { type: Pipe, args: [{
                name: 'columnActionEnabled',
                pure: true
            },] }
];
IgxColumnActionEnabledPipe.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
export class IgxFilterActionColumnsPipe {
    constructor(columnActions) {
        this.columnActions = columnActions;
    }
    transform(collection, filterCriteria, _pipeTrigger) {
        if (!collection) {
            return collection;
        }
        let copy = collection.slice(0);
        if (filterCriteria && filterCriteria.length > 0) {
            const filterFunc = (c) => {
                var _a, _b;
                const filterText = c.header || c.field;
                if (!filterText) {
                    return false;
                }
                return filterText.toLocaleLowerCase().indexOf(filterCriteria.toLocaleLowerCase()) >= 0 ||
                    ((_b = (_a = c.children) === null || _a === void 0 ? void 0 : _a.some(filterFunc)) !== null && _b !== void 0 ? _b : false);
            };
            copy = collection.filter(filterFunc);
        }
        // Preserve the filtered collection for use in the component
        this.columnActions.filteredColumns = copy;
        return copy;
    }
}
IgxFilterActionColumnsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterActionColumns',
                pure: true
            },] }
];
IgxFilterActionColumnsPipe.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
export class IgxSortActionColumnsPipe {
    transform(collection, displayOrder, _pipeTrigger) {
        if (displayOrder === ColumnDisplayOrder.Alphabetical) {
            return collection.sort((a, b) => (a.header || a.field).localeCompare(b.header || b.field));
        }
        return collection;
    }
}
IgxSortActionColumnsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'sortActionColumns',
                pure: true
            },] }
];
export class IgxGridDataMapperPipe {
    transform(data, field, _, val, isNestedPath) {
        return isNestedPath ? resolveNestedPath(data, field) : val;
    }
}
IgxGridDataMapperPipe.decorators = [
    { type: Pipe, args: [{ name: 'dataMapper' },] }
];
export class IgxStringReplacePipe {
    transform(value, search, replacement) {
        return value.replace(search, replacement);
    }
}
IgxStringReplacePipe.decorators = [
    { type: Pipe, args: [{ name: 'igxStringReplace' },] }
];
export class IgxGridTransactionStatePipe {
    transform(row_id, field, rowEditable, transactions, _, __, ___) {
        var _a;
        if (rowEditable) {
            const rowCurrentState = transactions.getAggregatedValue(row_id, false);
            if (rowCurrentState) {
                const value = resolveNestedPath(rowCurrentState, field);
                return value !== undefined && value !== null;
            }
        }
        else {
            const transaction = transactions.getState(row_id);
            const value = resolveNestedPath((_a = transaction === null || transaction === void 0 ? void 0 : transaction.value) !== null && _a !== void 0 ? _a : {}, field);
            return transaction && transaction.value && (value || value === 0 || value === false);
        }
    }
}
IgxGridTransactionStatePipe.decorators = [
    { type: Pipe, args: [{ name: 'transactionState' },] }
];
export class IgxColumnFormatterPipe {
    transform(value, formatter, rowData) {
        return formatter(value, rowData);
    }
}
IgxColumnFormatterPipe.decorators = [
    { type: Pipe, args: [{ name: 'columnFormatter' },] }
];
export class IgxSummaryFormatterPipe {
    transform(summaryResult, summaryOperand, summaryFormatter) {
        return summaryFormatter(summaryResult, summaryOperand);
    }
}
IgxSummaryFormatterPipe.decorators = [
    { type: Pipe, args: [{ name: 'summaryFormatter' },] }
];
export class IgxGridAddRowPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, isPinned = false, _pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (!grid.rowEditable || !grid.crudService.row || grid.crudService.row.getClassName() !== IgxAddRow.name ||
            !grid.gridAPI.crudService.addRowParent || isPinned !== grid.gridAPI.crudService.addRowParent.isPinned) {
            return collection;
        }
        const copy = collection.slice(0);
        const rec = grid.crudService.row.recordRef;
        copy.splice(grid.crudService.row.index, 0, rec);
        return copy;
    }
}
IgxGridAddRowPipe.decorators = [
    { type: Pipe, args: [{ name: 'gridAddRow' },] }
];
IgxGridAddRowPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
export class IgxHeaderGroupWidthPipe {
    transform(width, minWidth, hasLayout) {
        return hasLayout ? '' : `${Math.max(parseFloat(width), minWidth)}px`;
    }
}
IgxHeaderGroupWidthPipe.decorators = [
    { type: Pipe, args: [{ name: 'igxHeaderGroupWidth' },] }
];
export class IgxHeaderGroupStylePipe {
    transform(styles, column, _) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(column) : res;
        }
        return css;
    }
}
IgxHeaderGroupStylePipe.decorators = [
    { type: Pipe, args: [{ name: 'igxHeaderGroupStyle' },] }
];
//# sourceMappingURL=data:application/json;base64,