import { Pipe } from '@angular/core';
import { GridColumnDataType } from '../../data-operations/data-util';
import { IgxSorting } from '../../data-operations/sorting-strategy';
const HIDDEN_FIELD_NAME = '_Igx_Hidden_Data_';
/**
 * @hidden
 * @internal
 */
class GroupByRecord {
}
export class ITreeGridAggregation {
}
export class IgxGroupedTreeGridSorting extends IgxSorting {
    static instance() {
        return this._instance || (this._instance = new IgxGroupedTreeGridSorting());
    }
    getFieldValue(obj, key, isDate = false, isTime = false) {
        return obj.data[HIDDEN_FIELD_NAME] ?
            super.getFieldValue(obj.data[HIDDEN_FIELD_NAME], key, isDate, isTime) :
            super.getFieldValue(obj.data, key, isDate, isTime);
    }
}
IgxGroupedTreeGridSorting._instance = null;
/** @hidden */
export class IgxTreeGridGroupingPipe {
    transform(collection, groupingExpressions, groupKey, childDataKey, grid, aggregations) {
        if (groupingExpressions.length === 0) {
            return collection;
        }
        if ((groupKey === null || groupKey === void 0 ? void 0 : groupKey.toLowerCase()) === (childDataKey === null || childDataKey === void 0 ? void 0 : childDataKey.toLowerCase())) {
            throw new Error('Group key and child data key cannot be the same.');
        }
        this.grid = grid;
        const result = [];
        const groupedRecords = this.groupByMultiple(collection, groupingExpressions);
        this.flattenGrouping(groupedRecords, groupKey, childDataKey, result, aggregations);
        return result;
    }
    flattenGrouping(groupRecords, groupKey, childDataKey, data, aggregations = []) {
        for (const groupRecord of groupRecords) {
            const parent = {};
            const children = groupRecord.records;
            parent[childDataKey] = [];
            for (const aggregation of aggregations) {
                parent[aggregation.field] = aggregation.aggregate(parent, children);
            }
            parent[groupKey] = groupRecord.value + ` (${groupRecord.records.length})`;
            parent[HIDDEN_FIELD_NAME] = { [groupRecord.key]: groupRecord.value };
            data.push(parent);
            if (groupRecord.groups) {
                this.flattenGrouping(groupRecord.groups, groupKey, childDataKey, parent[childDataKey], aggregations);
            }
            else {
                parent[childDataKey] = children;
            }
        }
    }
    groupByMultiple(array, groupingExpressions, index = 0) {
        const res = this.groupBy(array, groupingExpressions[index]);
        if (index + 1 < groupingExpressions.length) {
            for (const groupByRecord of res) {
                groupByRecord.groups = this.groupByMultiple(groupByRecord.records, groupingExpressions, index + 1);
            }
        }
        return res;
    }
    groupBy(array, groupingExpression) {
        var _a;
        const key = groupingExpression.fieldName;
        const column = (_a = this.grid) === null || _a === void 0 ? void 0 : _a.getColumnByName(key);
        const isDateTime = (column === null || column === void 0 ? void 0 : column.dataType) === GridColumnDataType.Date ||
            (column === null || column === void 0 ? void 0 : column.dataType) === GridColumnDataType.DateTime ||
            (column === null || column === void 0 ? void 0 : column.dataType) === GridColumnDataType.Time;
        const map = new Map();
        for (const record of array) {
            const value = isDateTime
                ? this.grid.datePipe.transform(record[key])
                : record[key];
            let groupByRecord;
            if (map.has(value)) {
                groupByRecord = map.get(value);
            }
            else {
                groupByRecord = new GroupByRecord();
                groupByRecord.key = key;
                groupByRecord.value = value;
                groupByRecord.records = [];
                map.set(value, groupByRecord);
            }
            groupByRecord.records.push(record);
        }
        return Array.from(map.values());
    }
}
IgxTreeGridGroupingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridGrouping'
            },] }
];
//# sourceMappingURL=data:application/json;base64,