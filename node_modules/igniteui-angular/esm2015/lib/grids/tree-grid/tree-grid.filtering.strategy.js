import { parseDate, resolveNestedPath } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
export class TreeGridFilteringStrategy extends BaseFilteringStrategy {
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined, grid);
    }
    getFieldValue(rec, fieldName, isDate = false) {
        const hierarchicalRecord = rec;
        let value = resolveNestedPath(hierarchicalRecord.data, fieldName);
        value = value && isDate ? parseDate(value) : value;
        return value;
    }
    filterImpl(data, expressionsTree, advancedExpressionsTree, parent, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    }
}
export class TreeGridFormattedValuesFilteringStrategy extends TreeGridFilteringStrategy {
    /**
     * Creates a new instance of FormattedValuesFilteringStrategy.
     *
     * @param fields An array of column field names that should be formatted.
     * If omitted the values of all columns which has formatter will be formatted.
     */
    constructor(fields) {
        super();
        this.fields = fields;
    }
    /** @hidden */
    shouldApplyFormatter(fieldName) {
        return !this.fields || this.fields.length === 0 || this.fields.some(f => f === fieldName);
    }
    getFieldValue(rec, fieldName, isDate = false, isTime = false, grid) {
        const column = grid.getColumnByName(fieldName);
        const hierarchicalRecord = rec;
        let value = resolveNestedPath(hierarchicalRecord.data, fieldName);
        value = column.formatter && this.shouldApplyFormatter(fieldName) ?
            column.formatter(value) :
            value && (isDate || isTime) ? parseDate(value) : value;
        return value;
    }
}
export class TreeGridMatchingRecordsOnlyFilteringStrategy extends TreeGridFilteringStrategy {
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        return this.filterImplementation(data, expressionsTree, advancedExpressionsTree, undefined, grid);
    }
    filterImplementation(data, expressionsTree, advancedExpressionsTree, parent, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const filteredChildren = this.filterImplementation(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec = this.setCorrectLevelToFilteredRecords(rec);
                res.push(...rec.children);
            }
        }
        return res;
    }
    setCorrectLevelToFilteredRecords(rec) {
        if (rec.children && rec.children.length > 0) {
            rec.children.map(child => {
                child.level = child.level - 1;
                return this.setCorrectLevelToFilteredRecords(child);
            });
        }
        return rec;
    }
}
//# sourceMappingURL=data:application/json;base64,