import { Directive, Host, Input, EventEmitter, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, ConnectedPositioningStrategy, HorizontalAlignment, VerticalAlignment } from '../../services/public_api';
import { ColumnDisplayOrder } from '../common/enums';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
/**
 * Base class for the pinning/hiding column and exporter actions.
 *
 * @hidden @internal
 */
export class BaseToolbarDirective {
    constructor(toolbar) {
        this.toolbar = toolbar;
        /**
         * Emits an event before the toggle container is opened.
         */
        this.opening = new EventEmitter();
        /**
         * Emits an event after the toggle container is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Emits an event before the toggle container is closed.
         */
        this.closing = new EventEmitter();
        /**
         * Emits an event after the toggle container is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Emits when after a column's checked state is changed
         */
        this.columnToggle = new EventEmitter();
        this.$destroyer = new Subject();
        this._overlaySettings = {
            positionStrategy: new ConnectedPositioningStrategy({
                horizontalDirection: HorizontalAlignment.Left,
                horizontalStartPoint: HorizontalAlignment.Right,
                verticalDirection: VerticalAlignment.Bottom,
                verticalStartPoint: VerticalAlignment.Bottom
            }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnEscape: true,
            closeOnOutsideClick: true
        };
    }
    /**
     * Sets overlay settings
     */
    set overlaySettings(overlaySettings) {
        this._overlaySettings = overlaySettings;
    }
    ;
    /**
     * Returns overlay settings
     */
    get overlaySettings() {
        return this._overlaySettings;
    }
    /**
     * Returns the grid containing this component.
     */
    get grid() {
        return this.toolbar.grid;
    }
    ngOnDestroy() {
        this.$destroyer.next(true);
    }
    /** @hidden @internal */
    toggle(anchorElement, toggleRef, actions) {
        if (actions) {
            this._setupListeners(toggleRef);
            const setHeight = () => { var _a; return actions.columnsAreaMaxHeight = (_a = this.columnListHeight) !== null && _a !== void 0 ? _a : `${Math.max(this.grid.calcHeight * 0.5, 200)}px`; };
            toggleRef.opening.pipe(first()).subscribe(setHeight);
        }
        toggleRef.toggle(Object.assign(Object.assign({}, this.overlaySettings), { target: anchorElement, outlet: this.grid.outlet,
            excludeFromOutsideClick: [anchorElement] }));
    }
    /** @hidden @internal */
    focusSearch(columnActions) {
        var _a;
        (_a = columnActions.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
    }
    _setupListeners(toggleRef, actions) {
        if (actions) {
            if (!this.$sub || this.$sub.closed) {
                this.$sub = actions.columnToggled.subscribe((event) => this.columnToggle.emit(event));
            }
            else {
                this.$sub.unsubscribe();
            }
        }
        /** The if statement prevents emitting open and close events twice  */
        if (toggleRef.collapsed) {
            toggleRef.opening.pipe(first(), takeUntil(this.$destroyer)).subscribe((event) => this.opening.emit(event));
            toggleRef.opened.pipe(first(), takeUntil(this.$destroyer)).subscribe((event) => this.opened.emit(event));
        }
        else {
            toggleRef.closing.pipe(first(), takeUntil(this.$destroyer)).subscribe((event) => this.closing.emit(event));
            toggleRef.closed.pipe(first(), takeUntil(this.$destroyer)).subscribe((event) => this.closed.emit(event));
        }
    }
}
BaseToolbarDirective.decorators = [
    { type: Directive }
];
BaseToolbarDirective.ctorParameters = () => [
    { type: IgxGridToolbarComponent, decorators: [{ type: Host }] }
];
BaseToolbarDirective.propDecorators = {
    columnListHeight: [{ type: Input }],
    title: [{ type: Input }],
    prompt: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    opening: [{ type: Output }],
    opened: [{ type: Output }],
    closing: [{ type: Output }],
    closed: [{ type: Output }],
    columnToggle: [{ type: Output }]
};
/**
 * @hidden @internal
 * Base class for pinning/hiding column actions
 */
export class BaseToolbarColumnActionsDirective extends BaseToolbarDirective {
    constructor() {
        super(...arguments);
        this.hideFilter = false;
        this.filterCriteria = '';
        this.columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        this.columnsAreaMaxHeight = '100%';
        this.indentetion = 30;
    }
    checkAll() {
        this.columnActionsUI.checkAllColumns();
    }
    uncheckAll() {
        this.columnActionsUI.uncheckAllColumns();
    }
}
BaseToolbarColumnActionsDirective.decorators = [
    { type: Directive }
];
BaseToolbarColumnActionsDirective.propDecorators = {
    hideFilter: [{ type: Input }],
    filterCriteria: [{ type: Input }],
    columnDisplayOrder: [{ type: Input }],
    columnsAreaMaxHeight: [{ type: Input }],
    uncheckAllText: [{ type: Input }],
    checkAllText: [{ type: Input }],
    indentetion: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,