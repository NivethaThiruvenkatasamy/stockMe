import { Component, ContentChild, ElementRef, HostBinding, Inject, Input, Optional } from '@angular/core';
import { DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';
import { IgxIconService } from '../../icon/public_api';
import { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { IgxGridToolbarTitleDirective, IgxGridToolbarActionsDirective } from './common';
import { GridBaseAPIService } from '../api.service';
/**
 * Provides a context-aware container component for UI operations for the grid components.
 *
 * @igxModule IgxGridToolbarModule
 *
 */
export class IgxGridToolbarComponent extends DisplayDensityBase {
    constructor(_displayDensityOptions, api, iconService, element) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
        this.api = api;
        this.iconService = iconService;
        this.element = element;
        /**
         * When enabled, shows the indeterminate progress bar.
         *
         * @remarks
         * By default this will be toggled, when the default exporter component is present
         * and an exporting is in progress.
         */
        this.showProgress = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultStyle = true;
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /**
     * Gets/sets the grid component for the toolbar component.
     *
     * @remarks
     * Usually you should not set this property in the context of the default grid/tree grid.
     * The only grids that demands this to be set are the hierarchical child grids. For additional
     * information check the toolbar topic.
     */
    get grid() {
        if (this._grid) {
            return this._grid;
        }
        return this.api.grid;
    }
    set grid(value) {
        this._grid = value;
    }
    /** Returns the native DOM element of the toolbar component */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get cosyStyle() {
        return this.displayDensity === 'cosy';
    }
    /**
     * @hidden
     * @internal
     */
    get compactStyle() {
        return this.displayDensity === 'compact';
    }
    /** @hidden @internal */
    ngOnDestroy() {
        var _a;
        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
IgxGridToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-grid-toolbar',
                template: "<ng-template #title>\n    <ng-content select=\"[igxGridToolbarTitle],igx-grid-toolbar-title\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-title *ngIf=\"!hasTitle\">{{ grid.toolbarTitle }}</igx-grid-toolbar-title>\n<ng-container *ngTemplateOutlet=\"title\"></ng-container>\n\n<div class=\"igx-grid-toolbar__custom-content\">\n    <ng-content></ng-content>\n</div>\n\n<ng-template #actions>\n    <ng-content select=\"[igxGridToolbarActions],igx-grid-toolbar-actions\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-actions *ngIf=\"!hasActions\">\n    <igx-grid-toolbar-advanced-filtering *ngIf=\"grid.allowAdvancedFiltering\"></igx-grid-toolbar-advanced-filtering>\n    <igx-grid-toolbar-hiding *ngIf=\"grid.columnHiding\"></igx-grid-toolbar-hiding>\n    <igx-grid-toolbar-pinning *ngIf=\"grid.columnPinning\"></igx-grid-toolbar-pinning>\n    <igx-grid-toolbar-exporter *ngIf=\"grid.exportExcel || grid.exportCsv\" (exportStarted)=\"showProgress = true\" (exportEnded)=\"showProgress = false\">\n    </igx-grid-toolbar-exporter>\n</igx-grid-toolbar-actions>\n<ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"showProgress\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n"
            },] }
];
IgxGridToolbarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: GridBaseAPIService },
    { type: IgxIconService },
    { type: ElementRef }
];
IgxGridToolbarComponent.propDecorators = {
    showProgress: [{ type: Input }],
    grid: [{ type: Input }],
    hasTitle: [{ type: ContentChild, args: [IgxGridToolbarTitleDirective,] }],
    hasActions: [{ type: ContentChild, args: [IgxGridToolbarActionsDirective,] }],
    defaultStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar',] }],
    cosyStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--cosy',] }],
    compactStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--compact',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy90b29sYmFyL2dyaWQtdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUVMLFFBQVEsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQTBCLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLDhCQUE4QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3BEOzs7OztHQUtHO0FBS0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGtCQUFrQjtJQStFM0QsWUFDdUQsc0JBQThDLEVBQ3pGLEdBQXdELEVBQ3hELFdBQTJCLEVBQzNCLE9BQWdDO1FBRXhDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBTHFCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDekYsUUFBRyxHQUFILEdBQUcsQ0FBcUQ7UUFDeEQsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQzNCLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBakY1Qzs7Ozs7O1dBTUc7UUFFSSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQXlDNUI7OztXQUdHO1FBRUksaUJBQVksR0FBRyxJQUFJLENBQUM7UUE4QnZCLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUE1RUQ7Ozs7Ozs7T0FPRztJQUNILElBQ1csSUFBSTtRQUNYLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjtRQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELElBQVcsSUFBSSxDQUFDLEtBQTJCO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCw4REFBOEQ7SUFDOUQsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQXVCRDs7O09BR0c7SUFDSCxJQUNXLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQztJQUMxQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFDVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxTQUFTLENBQUM7SUFDN0MsQ0FBQztJQWdCRCx3QkFBd0I7SUFDakIsV0FBVzs7UUFDZCxNQUFBLElBQUksQ0FBQyxHQUFHLDBDQUFFLFdBQVcsRUFBRSxDQUFDO0lBQzVCLENBQUM7OztZQWpHSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsb3dDQUE0QzthQUMvQzs7OzRDQWlGUSxRQUFRLFlBQUksTUFBTSxTQUFDLG1CQUFtQjtZQS9GdEMsa0JBQWtCO1lBSGxCLGNBQWM7WUFUbkIsVUFBVTs7OzJCQW9DVCxLQUFLO21CQVdMLEtBQUs7dUJBcUJMLFlBQVksU0FBQyw0QkFBNEI7eUJBT3pDLFlBQVksU0FBQyw4QkFBOEI7MkJBTzNDLFdBQVcsU0FBQyx3QkFBd0I7d0JBT3BDLFdBQVcsU0FBQyw4QkFBOEI7MkJBUzFDLFdBQVcsU0FBQyxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGQsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25EZXN0cm95LFxuICAgIE9wdGlvbmFsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJRGlzcGxheURlbnNpdHlPcHRpb25zLCBEaXNwbGF5RGVuc2l0eVRva2VuLCBEaXNwbGF5RGVuc2l0eUJhc2UgfSBmcm9tICcuLi8uLi9jb3JlL2Rpc3BsYXlEZW5zaXR5JztcbmltcG9ydCB7IElneEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vaWNvbi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IHBpbkxlZnQsIHVucGluTGVmdCB9IGZyb20gJ0BpZ25pdGV1aS9tYXRlcmlhbC1pY29ucy1leHRlbmRlZCc7XG5pbXBvcnQgeyBJZ3hHcmlkVG9vbGJhclRpdGxlRGlyZWN0aXZlLCBJZ3hHcmlkVG9vbGJhckFjdGlvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4uL2dyaWQtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBjb250ZXh0LWF3YXJlIGNvbnRhaW5lciBjb21wb25lbnQgZm9yIFVJIG9wZXJhdGlvbnMgZm9yIHRoZSBncmlkIGNvbXBvbmVudHMuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hHcmlkVG9vbGJhck1vZHVsZVxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtZ3JpZC10b29sYmFyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZ3JpZC10b29sYmFyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudCBleHRlbmRzIERpc3BsYXlEZW5zaXR5QmFzZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGVuYWJsZWQsIHNob3dzIHRoZSBpbmRldGVybWluYXRlIHByb2dyZXNzIGJhci5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQnkgZGVmYXVsdCB0aGlzIHdpbGwgYmUgdG9nZ2xlZCwgd2hlbiB0aGUgZGVmYXVsdCBleHBvcnRlciBjb21wb25lbnQgaXMgcHJlc2VudFxuICAgICAqIGFuZCBhbiBleHBvcnRpbmcgaXMgaW4gcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2hvd1Byb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL3NldHMgdGhlIGdyaWQgY29tcG9uZW50IGZvciB0aGUgdG9vbGJhciBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFVzdWFsbHkgeW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGRlZmF1bHQgZ3JpZC90cmVlIGdyaWQuXG4gICAgICogVGhlIG9ubHkgZ3JpZHMgdGhhdCBkZW1hbmRzIHRoaXMgdG8gYmUgc2V0IGFyZSB0aGUgaGllcmFyY2hpY2FsIGNoaWxkIGdyaWRzLiBGb3IgYWRkaXRpb25hbFxuICAgICAqIGluZm9ybWF0aW9uIGNoZWNrIHRoZSB0b29sYmFyIHRvcGljLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBncmlkKCkge1xuICAgICAgICBpZiAodGhpcy5fZ3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmdyaWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBncmlkKHZhbHVlOiBJZ3hHcmlkQmFzZURpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLl9ncmlkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgdGhlIG5hdGl2ZSBET00gZWxlbWVudCBvZiB0aGUgdG9vbGJhciBjb21wb25lbnQgKi9cbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hHcmlkVG9vbGJhclRpdGxlRGlyZWN0aXZlKVxuICAgIHB1YmxpYyBoYXNUaXRsZTogSWd4R3JpZFRvb2xiYXJUaXRsZURpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKElneEdyaWRUb29sYmFyQWN0aW9uc0RpcmVjdGl2ZSlcbiAgICBwdWJsaWMgaGFzQWN0aW9uczogSWd4R3JpZFRvb2xiYXJBY3Rpb25zRGlyZWN0aXZlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWdyaWQtdG9vbGJhcicpXG4gICAgcHVibGljIGRlZmF1bHRTdHlsZSA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZ3JpZC10b29sYmFyLS1jb3N5JylcbiAgICBwdWJsaWMgZ2V0IGNvc3lTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheURlbnNpdHkgPT09ICdjb3N5JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZ3JpZC10b29sYmFyLS1jb21wYWN0JylcbiAgICBwdWJsaWMgZ2V0IGNvbXBhY3RTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheURlbnNpdHkgPT09ICdjb21wYWN0JztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dyaWQ6IElneEdyaWRCYXNlRGlyZWN0aXZlO1xuICAgIHByb3RlY3RlZCBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KERpc3BsYXlEZW5zaXR5VG9rZW4pIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zLFxuICAgICAgICBwcml2YXRlIGFwaTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LFxuICAgICAgICBwcml2YXRlIGljb25TZXJ2aWNlOiBJZ3hJY29uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PlxuICAgICkge1xuICAgICAgICBzdXBlcihfZGlzcGxheURlbnNpdHlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5pY29uU2VydmljZS5hZGRTdmdJY29uRnJvbVRleHQocGluTGVmdC5uYW1lLCBwaW5MZWZ0LnZhbHVlLCAnaW14LWljb25zJyk7XG4gICAgICAgIHRoaXMuaWNvblNlcnZpY2UuYWRkU3ZnSWNvbkZyb21UZXh0KHVucGluTGVmdC5uYW1lLCB1bnBpbkxlZnQudmFsdWUsICdpbXgtaWNvbnMnKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3ViPy51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==