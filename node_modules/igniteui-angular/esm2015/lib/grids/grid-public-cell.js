import { resolveNestedPath } from '../core/utils';
export class IgxGridCell {
    constructor(grid, row, column) {
        this.grid = grid;
        if (typeof row === 'number') {
            this._rowIndex = row;
        }
        else {
            this._row = row;
            this._rowIndex = row.index;
        }
        if (typeof column === 'string') {
            this._columnField = column;
        }
        else {
            this._column = column;
        }
    }
    /**
     * Returns the row containing the cell.
     * ```typescript
     * let row = this.cell.row;
     * ```
     *
     * @memberof IgxGridCell
     */
    get row() {
        return this._row || this.grid.createRow(this._rowIndex);
    }
    /**
     * Returns the column of the cell.
     * ```typescript
     * let column = this.cell.column;
     * ```
     *
     * @memberof IgxGridCell
     */
    get column() {
        return this._column || this.grid.getColumnByName(this._columnField);
    }
    /**
     * Gets the current edit value while a cell is in edit mode.
     * ```typescript
     * let editValue = this.cell.editValue;
     * ```
     *
     * @memberof IgxGridCell
     */
    get editValue() {
        if (this.isCellInEditMode()) {
            return this.grid.crudService.cell.editValue;
        }
    }
    /**
     * Sets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * this.cell.editValue = value;
     * ```
     *
     * @memberof IgxGridCell
     */
    set editValue(value) {
        if (this.isCellInEditMode()) {
            this.grid.crudService.cell.editValue = value;
        }
    }
    /**
     * Returns whether the cell is editable..
     *
     * @memberof IgxGridCell
     */
    get editable() {
        var _a;
        return this.column.editable && !((_a = this.row) === null || _a === void 0 ? void 0 : _a.disabled);
    }
    /**
     * Gets the width of the cell.
     * ```typescript
     * let cellWidth = this.cell.width;
     * ```
     *
     * @memberof IgxGridCell
     */
    get width() {
        return this.column.width;
    }
    /**
     * Returns the cell value.
     *
     * @memberof IgxGridCell
     */
    get value() {
        var _a, _b;
        // will return undefined for a column layout, because getCellByColumnVisibleIndex may return the column layout at that index.
        // getCellByColumnVisibleIndex is deprecated and will be removed in future version
        return this.column.field ?
            this.column.hasNestedPath ? resolveNestedPath((_a = this.row) === null || _a === void 0 ? void 0 : _a.data, this.column.field) : (_b = this.row) === null || _b === void 0 ? void 0 : _b.data[this.column.field]
            : undefined;
    }
    /**
     * Updates the cell value.
     *
     * @memberof IgxGridCell
     */
    set value(val) {
        this.update(val);
    }
    /**
     * Gets the cell id.
     * A cell in the grid is identified by:
     * - rowID - primaryKey data value or the whole rowData, if the primaryKey is omitted.
     * - rowIndex - the row index
     * - columnID - column index
     *
     * ```typescript
     * let cellID = cell.id;
     * ```
     *
     * @memberof IgxGridCell
     */
    get id() {
        var _a, _b, _c;
        const primaryKey = this.grid.primaryKey;
        const rowID = primaryKey ? (_a = this.row) === null || _a === void 0 ? void 0 : _a.data[primaryKey] : (_b = this.row) === null || _b === void 0 ? void 0 : _b.data;
        return { rowID, columnID: this.column.index, rowIndex: this._rowIndex || ((_c = this.row) === null || _c === void 0 ? void 0 : _c.index) };
    }
    /**
     * Returns if the row is currently in edit mode.
     *
     * @memberof IgxGridCell
     */
    get editMode() {
        return this.isCellInEditMode();
    }
    /**
     * Starts/ends edit mode for the cell.
     *
     * ```typescript
     * cell.editMode  = !cell.editMode;
     * ```
     *
     * @memberof IgxGridCell
     */
    set editMode(value) {
        var _a;
        const isInEditMode = this.isCellInEditMode();
        if (!this.row || ((_a = this.row) === null || _a === void 0 ? void 0 : _a.deleted) || isInEditMode === value) {
            return;
        }
        if (this.editable && value) {
            this.endEdit();
            // TODO possibly define similar method in gridAPI, which does not emit event
            this.grid.crudService.enterEditMode(this);
        }
        else {
            this.grid.crudService.endCellEdit();
        }
        this.grid.notifyChanges();
    }
    /**
     * Gets whether the cell is selected.
     * ```typescript
     * let isSelected = this.cell.selected;
     * ```
     *
     *
     * @memberof IgxGridCell
     */
    get selected() {
        return this.grid.selectionService.selected(this.selectionNode);
    }
    /**
     * Selects/deselects the cell.
     * ```typescript
     * this.cell.selected = true.
     * ```
     *
     *
     * @memberof IgxGridCell
     */
    set selected(val) {
        const node = this.selectionNode;
        if (val) {
            this.grid.selectionService.add(node);
        }
        else {
            this.grid.selectionService.remove(node);
        }
        this.grid.notifyChanges();
    }
    get active() {
        var _a;
        const node = this.grid.navigation.activeNode;
        return node ? node.row === ((_a = this.row) === null || _a === void 0 ? void 0 : _a.index) && node.column === this.column.visibleIndex : false;
    }
    /**
     * Updates the cell value.
     *
     * ```typescript
     * cell.update(newValue);
     * ```
     *
     * @memberof IgxGridCell
     */
    update(val) {
        var _a;
        if ((_a = this.row) === null || _a === void 0 ? void 0 : _a.deleted) {
            return;
        }
        this.endEdit();
        const cell = this.isCellInEditMode() ? this.grid.crudService.cell : this.grid.crudService.createCell(this);
        cell.editValue = val;
        this.grid.gridAPI.update_cell(cell);
        this.grid.crudService.endCellEdit();
        this.grid.notifyChanges();
    }
    get selectionNode() {
        var _a;
        return {
            row: (_a = this.row) === null || _a === void 0 ? void 0 : _a.index,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.column.visibleIndex,
            layout: this.column.columnLayoutChild ? {
                rowStart: this.column.rowStart,
                colStart: this.column.colStart,
                rowEnd: this.column.rowEnd,
                colEnd: this.column.colEnd,
                columnVisibleIndex: this.column.visibleIndex
            } : null
        };
    }
    isCellInEditMode() {
        if (this.grid.crudService.cellInEditMode) {
            const cellInEditMode = this.grid.crudService.cell.id;
            const isCurrentCell = cellInEditMode.rowID === this.id.rowID &&
                cellInEditMode.rowIndex === this.id.rowIndex &&
                cellInEditMode.columnID === this.id.columnID;
            return isCurrentCell;
        }
        return false;
    }
    endEdit() {
        if (!this.isCellInEditMode()) {
            this.grid.gridAPI.update_cell(this.grid.crudService.cell);
            this.grid.crudService.endCellEdit();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,