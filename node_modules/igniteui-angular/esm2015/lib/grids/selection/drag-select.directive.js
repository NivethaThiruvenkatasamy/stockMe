import { Directive, Input, Output, EventEmitter, ElementRef, NgZone } from '@angular/core';
import { interval, Subject, animationFrameScheduler } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
var DragScrollDirection;
(function (DragScrollDirection) {
    DragScrollDirection[DragScrollDirection["NONE"] = 0] = "NONE";
    DragScrollDirection[DragScrollDirection["LEFT"] = 1] = "LEFT";
    DragScrollDirection[DragScrollDirection["TOP"] = 2] = "TOP";
    DragScrollDirection[DragScrollDirection["RIGHT"] = 3] = "RIGHT";
    DragScrollDirection[DragScrollDirection["BOTTOM"] = 4] = "BOTTOM";
    DragScrollDirection[DragScrollDirection["TOPLEFT"] = 5] = "TOPLEFT";
    DragScrollDirection[DragScrollDirection["TOPRIGHT"] = 6] = "TOPRIGHT";
    DragScrollDirection[DragScrollDirection["BOTTOMLEFT"] = 7] = "BOTTOMLEFT";
    DragScrollDirection[DragScrollDirection["BOTTOMRIGHT"] = 8] = "BOTTOMRIGHT";
})(DragScrollDirection || (DragScrollDirection = {}));
/**
 * An internal directive encapsulating the drag scroll behavior in the grid.
 *
 * @hidden @internal
 */
export class IgxGridDragSelectDirective {
    constructor(ref, zone) {
        this.ref = ref;
        this.zone = zone;
        this.dragStop = new EventEmitter();
        this.dragScroll = new EventEmitter();
        this.end$ = new Subject();
        this.lastDirection = DragScrollDirection.NONE;
        this.startDragSelection = (ev) => {
            if (!this.activeDrag) {
                return;
            }
            const x = ev.clientX;
            const y = ev.clientY;
            const { direction, delta } = this._measureDimensions(x, y);
            if (direction === this.lastDirection) {
                return;
            }
            this.unsubscribe();
            this._sub = this._interval$.subscribe(() => this.dragScroll.emit(delta));
            this.lastDirection = direction;
        };
        this.stopDragSelection = () => {
            if (!this.activeDrag) {
                return;
            }
            this.dragStop.emit(false);
            this.unsubscribe();
            this.lastDirection = DragScrollDirection.NONE;
        };
        this._interval$ = interval(0, animationFrameScheduler).pipe(takeUntil(this.end$), filter(() => this.activeDrag));
    }
    get activeDrag() {
        return this._activeDrag;
    }
    set activeDrag(val) {
        if (val !== this._activeDrag) {
            this.unsubscribe();
            this._activeDrag = val;
        }
    }
    get nativeElement() {
        return this.ref.nativeElement;
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.addEventListener('pointerover', this.startDragSelection);
            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);
        });
    }
    ngOnDestroy() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);
            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);
        });
        this.unsubscribe();
        this.end$.complete();
    }
    _measureDimensions(x, y) {
        let direction;
        let delta = { left: 0, top: 0 };
        const { left, top, width, height } = this.nativeElement.getBoundingClientRect();
        const RATIO = 0.15;
        const offsetX = Math.trunc(x - left);
        const offsetY = Math.trunc(y - top);
        const leftDirection = offsetX <= width * RATIO;
        const rightDirection = offsetX >= width * (1 - RATIO);
        const topDirection = offsetY <= height * RATIO;
        const bottomDirection = offsetY >= height * (1 - RATIO);
        if (topDirection && leftDirection) {
            direction = DragScrollDirection.TOPLEFT;
            delta = { left: -1, top: -1 };
        }
        else if (topDirection && rightDirection) {
            direction = DragScrollDirection.TOPRIGHT;
            delta = { left: 1, top: -1 };
        }
        else if (bottomDirection && leftDirection) {
            direction = DragScrollDirection.BOTTOMLEFT;
            delta = { left: -1, top: 1 };
        }
        else if (bottomDirection && rightDirection) {
            direction = DragScrollDirection.BOTTOMRIGHT;
            delta = { top: 1, left: 1 };
        }
        else if (topDirection) {
            direction = DragScrollDirection.TOP;
            delta.top = -1;
        }
        else if (bottomDirection) {
            direction = DragScrollDirection.BOTTOM;
            delta.top = 1;
        }
        else if (leftDirection) {
            direction = DragScrollDirection.LEFT;
            delta.left = -1;
        }
        else if (rightDirection) {
            direction = DragScrollDirection.RIGHT;
            delta.left = 1;
        }
        else {
            direction = DragScrollDirection.NONE;
        }
        return { direction, delta };
    }
    unsubscribe() {
        if (this._sub) {
            this._sub.unsubscribe();
        }
    }
}
IgxGridDragSelectDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxGridDragSelect]' },] }
];
IgxGridDragSelectDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
IgxGridDragSelectDirective.propDecorators = {
    dragStop: [{ type: Output }],
    dragScroll: [{ type: Output }],
    activeDrag: [{ type: Input, args: ['igxGridDragSelect',] }]
};
//# sourceMappingURL=data:application/json;base64,