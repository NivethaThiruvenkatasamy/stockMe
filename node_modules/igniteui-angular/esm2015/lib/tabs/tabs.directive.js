import { AnimationBuilder } from '@angular/animations';
import { ContentChildren, Directive, EventEmitter, Input, Output } from '@angular/core';
import { Direction, IgxCarouselComponentBase } from '../carousel/carousel-base';
import { IgxTabItemDirective } from './tab-item.directive';
import { IgxTabContentBase } from './tabs.base';
export class IgxTabsDirective extends IgxCarouselComponentBase {
    /** @hidden */
    constructor(builder) {
        super(builder);
        /**
         * Output to enable support for two-way binding on [(selectedIndex)]
         */
        this.selectedIndexChange = new EventEmitter();
        /**
         * Emitted when the selected index is about to change.
         */
        this.selectedIndexChanging = new EventEmitter();
        /**
         * Emitted when the selected item is changed.
         */
        this.selectedItemChange = new EventEmitter();
        /** @hidden */
        this._disableAnimation = false;
        this._selectedIndex = -1;
    }
    /**
     * An @Input property that gets/sets the index of the selected item.
     * Default value is 0 if contents are defined otherwise defaults to -1.
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        if (this._selectedIndex !== value) {
            let newIndex = value;
            const oldIndex = this._selectedIndex;
            const args = {
                owner: this,
                cancel: false,
                oldIndex,
                newIndex
            };
            this.selectedIndexChanging.emit(args);
            if (!args.cancel) {
                newIndex = args.newIndex;
                this._selectedIndex = newIndex;
                this.selectedIndexChange.emit(this._selectedIndex);
            }
            this.updateSelectedTabs(oldIndex);
        }
    }
    /**
     * Enables/disables the transition animation of the contents.
     */
    get disableAnimation() {
        return this._disableAnimation;
    }
    set disableAnimation(value) {
        this._disableAnimation = value;
    }
    /**
     * Gets the selected item.
     */
    get selectedItem() {
        return this.items && this.selectedIndex >= 0 && this.selectedIndex < this.items.length ?
            this.items.get(this.selectedIndex) : null;
    }
    /** @hidden */
    ngAfterViewInit() {
        if (this._selectedIndex === -1) {
            const hasSelectedTab = this.items.some((tab, i) => {
                if (tab.selected) {
                    this._selectedIndex = i;
                }
                return tab.selected;
            });
            if (!hasSelectedTab && this.hasPanels) {
                this._selectedIndex = 0;
            }
        }
        // Use promise to avoid expression changed after check error
        Promise.resolve().then(() => {
            this.updateSelectedTabs(null, false);
        });
        this._itemChanges$ = this.items.changes.subscribe(() => {
            this.onItemChanges();
        });
        this.setAttributes();
    }
    /** @hidden */
    ngOnDestroy() {
        if (this._itemChanges$) {
            this._itemChanges$.unsubscribe();
        }
    }
    /** @hidden */
    selectTab(tab, selected) {
        if (!this.items) {
            return;
        }
        const tabs = this.items.toArray();
        if (selected) {
            const index = tabs.indexOf(tab);
            if (index > -1) {
                this.selectedIndex = index;
            }
        }
        else {
            if (tabs.every(t => !t.selected)) {
                this.selectedIndex = -1;
            }
        }
    }
    /** @hidden */
    getPreviousElement() {
        return this.previousItem.panelComponent.nativeElement;
    }
    /** @hidden */
    getCurrentElement() {
        return this.currentItem.panelComponent.nativeElement;
    }
    /** @hidden */
    scrollTabHeaderIntoView() {
    }
    /** @hidden */
    onItemChanges() {
        this.setAttributes();
        // Check if there is selected tab
        let selectedIndex = -1;
        this.items.some((tab, i) => {
            if (tab.selected) {
                selectedIndex = i;
            }
            return tab.selected;
        });
        if (selectedIndex >= 0) {
            // Set the selected index to the tab that has selected=true
            Promise.resolve().then(() => {
                this.selectedIndex = selectedIndex;
            });
        }
        else {
            if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {
                // Select the tab on the same index the previous selected tab was
                Promise.resolve().then(() => {
                    this.updateSelectedTabs(null);
                });
            }
            else if (this.selectedIndex >= this.items.length) {
                // Select the last tab
                Promise.resolve().then(() => {
                    this.selectedIndex = this.items.length - 1;
                });
            }
        }
    }
    setAttributes() {
        this.items.forEach(item => {
            if (item.panelComponent && !item.headerComponent.nativeElement.getAttribute('id')) {
                const id = this.getNextTabId();
                const tabHeaderId = `${this.componentName}-header-${id}`;
                const tabPanelId = `${this.componentName}-content-${id}`;
                this.setHeaderAttribute(item, 'id', tabHeaderId);
                this.setHeaderAttribute(item, 'aria-controls', tabPanelId);
                this.setPanelAttribute(item, 'id', tabPanelId);
                this.setPanelAttribute(item, 'aria-labelledby', tabHeaderId);
            }
        });
    }
    setHeaderAttribute(item, attrName, value) {
        item.headerComponent.nativeElement.setAttribute(attrName, value);
    }
    setPanelAttribute(item, attrName, value) {
        item.panelComponent.nativeElement.setAttribute(attrName, value);
    }
    get hasPanels() {
        return this.panels && this.panels.length;
    }
    updateSelectedTabs(oldSelectedIndex, raiseEvent = true) {
        if (!this.items) {
            return;
        }
        let newTab;
        const oldTab = this.currentItem;
        // First select the new tab
        if (this._selectedIndex >= 0 && this._selectedIndex < this.items.length) {
            newTab = this.items.get(this._selectedIndex);
            newTab.selected = true;
        }
        // Then unselect the other tabs
        this.items.forEach((tab, i) => {
            if (i !== this._selectedIndex) {
                tab.selected = false;
            }
        });
        if (this._selectedIndex !== oldSelectedIndex) {
            this.scrollTabHeaderIntoView();
            this.triggerPanelAnimations(oldSelectedIndex);
            if (raiseEvent && newTab !== oldTab) {
                this.selectedItemChange.emit({
                    owner: this,
                    newItem: newTab,
                    oldItem: oldTab
                });
            }
        }
    }
    triggerPanelAnimations(oldSelectedIndex) {
        const item = this.items.get(this._selectedIndex);
        if (item &&
            !this.disableAnimation &&
            this.hasPanels &&
            this.currentItem &&
            !this.currentItem.selected) {
            item.direction = this._selectedIndex > oldSelectedIndex ? Direction.NEXT : Direction.PREV;
            if (this.previousItem && this.previousItem.previous) {
                this.previousItem.previous = false;
            }
            this.currentItem.direction = item.direction;
            this.previousItem = this.currentItem;
            this.currentItem = item;
            this.triggerAnimations();
        }
        else {
            this.currentItem = item;
        }
    }
}
IgxTabsDirective.decorators = [
    { type: Directive }
];
IgxTabsDirective.ctorParameters = () => [
    { type: AnimationBuilder }
];
IgxTabsDirective.propDecorators = {
    selectedIndex: [{ type: Input }],
    disableAnimation: [{ type: Input }],
    selectedIndexChange: [{ type: Output }],
    selectedIndexChanging: [{ type: Output }],
    selectedItemChange: [{ type: Output }],
    items: [{ type: ContentChildren, args: [IgxTabItemDirective,] }],
    panels: [{ type: ContentChildren, args: [IgxTabContentBase, { descendants: true },] }]
};
//# sourceMappingURL=data:application/json;base64,