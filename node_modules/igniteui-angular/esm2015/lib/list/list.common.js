import { Directive, TemplateRef, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
}
IgxListBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListBase]'
            },] }
];
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxEmptyList]'
            },] }
];
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDataLoading]'
            },] }
];
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemLeftPanning]'
            },] }
];
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemRightPanning]'
            },] }
];
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC9saXN0LmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBMkIsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQTBCLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNbEcsY0FBYztBQUlkLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxrQkFBa0I7SUFleEQsWUFBK0Qsc0JBQThDO1FBQ3pHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRDZCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFFN0csQ0FBQzs7O1lBcEJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTthQUM1Qjs7OzRDQWdCZ0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7O0FBS3ZELE1BQU0sQ0FBTixJQUFZLGVBQXFDO0FBQWpELFdBQVksZUFBZTtJQUFHLHFEQUFJLENBQUE7SUFBRSxxREFBSSxDQUFBO0lBQUUsdURBQUssQ0FBQTtBQUFDLENBQUMsRUFBckMsZUFBZSxLQUFmLGVBQWUsUUFBc0I7QUFLakQsTUFBTSxPQUFPLDZCQUE2QjtJQUN0QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjthQUM3Qjs7O1lBbkNtQixXQUFXOztBQTJDL0IsTUFBTSxPQUFPLCtCQUErQjtJQUN4QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjthQUMvQjs7O1lBMUNtQixXQUFXOztBQWtEL0IsTUFBTSxPQUFPLHVDQUF1QztJQUNoRCxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjthQUN2Qzs7O1lBakRtQixXQUFXOztBQXlEL0IsTUFBTSxPQUFPLHdDQUF3QztJQUNqRCxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjthQUN4Qzs7O1lBeERtQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpc3BsYXlEZW5zaXR5QmFzZSwgSURpc3BsYXlEZW5zaXR5T3B0aW9ucywgRGlzcGxheURlbnNpdHlUb2tlbiB9IGZyb20gJy4uL2NvcmUvZGVuc2l0eSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3RDaGlsZCB7XG4gICAgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RCYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2Uge1xuICAgIHB1YmxpYyBpdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIGFsbG93TGVmdFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcHVibGljIGFsbG93UmlnaHRQYW5uaW5nOiBib29sZWFuO1xuICAgIHB1YmxpYyBwYW5FbmRUcmlnZ2VyaW5nVGhyZXNob2xkOiBudW1iZXI7XG4gICAgcHVibGljIGxlZnRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHB1YmxpYyByaWdodFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIHN0YXJ0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgZW5kUGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgcmVzZXRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHB1YmxpYyBwYW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIGNoaWxkcmVuOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBwdWJsaWMgbGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgcHVibGljIGxpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KERpc3BsYXlEZW5zaXR5VG9rZW4pIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKF9kaXNwbGF5RGVuc2l0eU9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gSWd4TGlzdFBhblN0YXRlIHsgTk9ORSwgTEVGVCwgUklHSFQgfVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hFbXB0eUxpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFbXB0eUxpc3RUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0YUxvYWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRhTG9hZGluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbUxlZnRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=