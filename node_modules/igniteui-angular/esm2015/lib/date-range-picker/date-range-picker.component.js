import { ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injector, Input, LOCALE_ID, NgModuleRef, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { NgControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent, merge, noop } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { fadeIn, fadeOut } from '../animations/fade';
import { CalendarSelection, WEEKDAYS } from '../calendar/public_api';
import { DateRangeType } from '../core/dates';
import { DisplayDensityToken } from '../core/density';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DateTimeUtil } from '../date-common/util/date-time.util';
import { isDate, parseDate, PlatformUtil } from '../core/utils';
import { IgxCalendarContainerComponent } from '../date-common/calendar-container/calendar-container.component';
import { IgxPickerActionsDirective } from '../date-common/picker-icons.common';
import { PickerBaseDirective } from '../date-common/picker-base.directive';
import { IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective, IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { AutoPositionStrategy, IgxOverlayService } from '../services/public_api';
import { IgxDateRangeEndComponent, IgxDateRangeInputsBaseComponent, IgxDateRangeSeparatorDirective, IgxDateRangeStartComponent } from './date-range-picker-inputs.common';
const SingleInputDatesConcatenationString = ' - ';
/**
 * Provides the ability to select a range of dates from a calendar UI or editable inputs.
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * It displays the range selection in a single or two input fields.
 * The default template displays a single *readonly* input field
 * while projecting `igx-date-range-start` and `igx-date-range-end`
 * displays two *editable* input fields.
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown"></igx-date-range-picker>
 * ```
 */
export class IgxDateRangePickerComponent extends PickerBaseDirective {
    constructor(element, _localeId, platform, _injector, _moduleRef, _cdr, _overlayService, _displayDensityOptions, _inputGroupType) {
        super(element, _localeId, _displayDensityOptions, _inputGroupType);
        this.element = element;
        this._localeId = _localeId;
        this.platform = platform;
        this._injector = _injector;
        this._moduleRef = _moduleRef;
        this._cdr = _cdr;
        this._overlayService = _overlayService;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        /**
         * The number of displayed month views.
         *
         * @remarks
         * Default is `2`.
         *
         * @example
         * ```html
         * <igx-date-range-picker [displayMonthsCount]="3"></igx-date-range-picker>
         * ```
         */
        this.displayMonthsCount = 2;
        /**
         * The start day of the week.
         *
         * @remarks
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         *
         * @example
         * ```html
         * <igx-date-range-picker [weekStart]="1"></igx-date-range-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * Sets the `placeholder` for single-input `IgxDateRangePickerComponent`.
         *
         *   @example
         * ```html
         * <igx-date-range-picker [placeholder]="'Choose your dates'"></igx-date-range-picker>
         * ```
         */
        this.placeholder = '';
        /**
         * Emitted when the picker's value changes. Used for two-way binding.
         *
         * @example
         * ```html
         * <igx-date-range-picker [(value)]="date"></igx-date-range-picker>
         * ```
         */
        this.valueChange = new EventEmitter();
        /** @hidden @internal */
        this.cssClass = 'igx-date-range-picker';
        this._resourceStrings = CurrentResourceStrings.DateRangePickerResStrings;
        this._doneButtonText = null;
        this._dateSeparator = null;
        this._overlaySubFilter = [
            filter(x => x.id === this._overlayId),
            takeUntil(merge(this._destroy$, this.closed))
        ];
        this._dialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            closeOnEscape: true
        };
        this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            closeOnEscape: true
        };
        this.onChangeCallback = noop;
        this.onTouchCallback = noop;
        this.onValidatorChange = noop;
        this.onStatusChanged = () => {
            if (this.inputGroup) {
                this.inputDirective.valid = this.isTouchedOrDirty
                    ? this.getInputState(this.inputGroup.isFocused)
                    : IgxInputState.INITIAL;
            }
            else if (this.hasProjectedInputs) {
                this.projectedInputs
                    .forEach(i => {
                    i.inputDirective.valid = this.isTouchedOrDirty
                        ? this.getInputState(i.isFocused)
                        : IgxInputState.INITIAL;
                    ;
                });
            }
            this.setRequiredToInputs();
        };
    }
    /**
     * The default text of the calendar dialog `done` button.
     *
     * @remarks
     * Default value is `Done`.
     * An @Input property that renders Done button with custom text. By default `doneButtonText` is set to Done.
     * The button will only show up in `dialog` mode.
     *
     * @example
     * ```html
     * <igx-date-range-picker doneButtonText="完了"></igx-date-range-picker>
     * ```
     */
    set doneButtonText(value) {
        this._doneButtonText = value;
    }
    get doneButtonText() {
        if (this._doneButtonText === null) {
            return this.resourceStrings.igx_date_range_picker_done_button;
        }
        return this._doneButtonText;
    }
    /**
     * The minimum value in a valid range.
     *
     * @example
     * <igx-date-range-picker [minValue]="minDate"></igx-date-range-picker>
     */
    set minValue(value) {
        this._minValue = value;
        this.onValidatorChange();
    }
    get minValue() {
        return this._minValue;
    }
    /**
     * The maximum value in a valid range.
     *
     * @example
     * <igx-date-range-picker [maxValue]="maxDate"></igx-date-range-picker>
     */
    set maxValue(value) {
        this._maxValue = value;
        this.onValidatorChange();
    }
    get maxValue() {
        return this._maxValue;
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /** @hidden @internal */
    get dateSeparator() {
        if (this._dateSeparator === null) {
            return this.resourceStrings.igx_date_range_picker_date_separator;
        }
        return this._dateSeparator;
    }
    /** @hidden @internal */
    get appliedFormat() {
        return DateTimeUtil.getLocaleDateFormat(this.locale, this.displayFormat)
            || DateTimeUtil.DEFAULT_INPUT_FORMAT;
    }
    /** @hidden @internal */
    get singleInputFormat() {
        if (this.placeholder !== '') {
            return this.placeholder;
        }
        const format = this.appliedFormat;
        return `${format}${SingleInputDatesConcatenationString}${format}`;
    }
    /**
     * Gets calendar state.
     *
     * ```typescript
     * let state = this.dateRange.collapsed;
     * ```
     */
    get collapsed() {
        return this._collapsed;
    }
    /**
     * The currently selected value / range from the calendar
     *
     * @remarks
     * The current value is of type `DateRange`
     *
     * @example
     * ```typescript
     * const newValue: DateRange = { start: new Date("2/2/2012"), end: new Date("3/3/2013")};
     * this.dateRangePicker.value = newValue;
     * ```
     */
    get value() {
        return this._value;
    }
    set value(value) {
        this.updateValue(value);
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    }
    /** @hidden @internal */
    get hasProjectedInputs() {
        var _a;
        return ((_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    /** @hidden @internal */
    get separatorClass() {
        return this.getComponentDensityClass('igx-date-range-picker__label');
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            const error = this._ngControl.control.validator({});
            return (error && error.required) ? true : false;
        }
        return false;
    }
    get calendar() {
        return this._calendar;
    }
    get dropdownOverlaySettings() {
        return Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
    }
    get dialogOverlaySettings() {
        return Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_UP:
                if (event.altKey) {
                    this.close();
                }
                break;
            case this.platform.KEYMAP.ARROW_DOWN:
                if (event.altKey) {
                    this.open();
                }
                break;
        }
    }
    /**
     * Opens the date range picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.open()">Open Dialog</button
     * ```
     */
    open(overlaySettings) {
        if (!this.collapsed || this.disabled) {
            return;
        }
        const settings = Object.assign({}, this.isDropdown
            ? this.dropdownOverlaySettings
            : this.dialogOverlaySettings, overlaySettings);
        this._overlayId = this._overlayService
            .attach(IgxCalendarContainerComponent, settings, this._moduleRef);
        this.subscribeToOverlayEvents();
        this._overlayService.show(this._overlayId);
    }
    /**
     * Closes the date range picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.close()">Close Dialog</button>
     * ```
     */
    close() {
        if (!this.collapsed) {
            this._overlayService.hide(this._overlayId);
        }
    }
    /**
     * Toggles the date range picker's dropdown or dialog
     *
     * @example
     * ```html
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.toggle()">Toggle Dialog</button>
     * ```
     */
    toggle(overlaySettings) {
        if (!this.collapsed) {
            this.close();
        }
        else {
            this.open(overlaySettings);
        }
    }
    /**
     * Selects a range of dates. If no `endDate` is passed, range is 1 day (only `startDate`)
     *
     * @example
     * ```typescript
     * public selectFiveDayRange() {
     *  const today = new Date();
     *  const inFiveDays = new Date(new Date().setDate(today.getDate() + 5));
     *  this.dateRange.select(today, inFiveDays);
     * }
     * ```
     */
    select(startDate, endDate) {
        endDate = endDate !== null && endDate !== void 0 ? endDate : startDate;
        const dateRange = [startDate, endDate];
        this.handleSelection(dateRange);
    }
    /** @hidden @internal */
    writeValue(value) {
        this.updateValue(value);
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this.onTouchCallback = fn;
    }
    /** @hidden @internal */
    validate(control) {
        const value = control.value;
        const errors = {};
        if (value) {
            if (this.hasProjectedInputs) {
                const startInput = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
                const endInput = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
                if (!startInput.dateTimeEditor.value) {
                    Object.assign(errors, { startValue: true });
                }
                if (!endInput.dateTimeEditor.value) {
                    Object.assign(errors, { endValue: true });
                }
            }
            const min = parseDate(this.minValue);
            const max = parseDate(this.maxValue);
            const start = parseDate(value.start);
            const end = parseDate(value.end);
            if ((min && start && DateTimeUtil.lessThanMinValue(start, min, false))
                || (min && end && DateTimeUtil.lessThanMinValue(end, min, false))) {
                Object.assign(errors, { minValue: true });
            }
            if ((max && start && DateTimeUtil.greaterThanMaxValue(start, max, false))
                || (max && end && DateTimeUtil.greaterThanMaxValue(end, max, false))) {
                Object.assign(errors, { maxValue: true });
            }
        }
        return Object.keys(errors).length > 0 ? errors : null;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @hidden */
    ngOnInit() {
        this._ngControl = this._injector.get(NgControl, null);
    }
    /** @hidden */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.subscribeToDateEditorEvents();
        this.configPositionStrategy();
        this.configOverlaySettings();
        this.cacheFocusedInput();
        this.attachOnTouched();
        this.setRequiredToInputs();
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        // delay invocations until the current change detection cycle has completed
        Promise.resolve().then(() => {
            this.updateDisabledState();
            this.initialSetValue();
            this.updateInputs();
            // B.P. 07 July 2021 - IgxDateRangePicker not showing initial disabled state with ChangeDetectionStrategy.OnPush #9776
            /**
             * if disabled is placed on the range picker element and there are projected inputs
             * run change detection since igxInput will initially set the projected inputs' disabled to false
             */
            if (this.hasProjectedInputs && this.disabled) {
                this._cdr.markForCheck();
            }
        });
        this.updateDisplayFormat();
        this.updateInputFormat();
    }
    /** @hidden @internal */
    ngOnChanges(changes) {
        if (changes['displayFormat'] && this.hasProjectedInputs) {
            this.updateDisplayFormat();
        }
        if (changes['inputFormat'] && this.hasProjectedInputs) {
            this.updateInputFormat();
        }
        if (changes['disabled']) {
            this.updateDisabledState();
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
        if (this._overlayId) {
            this._overlayService.detach(this._overlayId);
        }
    }
    /** @hidden @internal */
    getEditElement() {
        return this.inputDirective.nativeElement;
    }
    get isTouchedOrDirty() {
        return (this._ngControl.control.touched || this._ngControl.control.dirty)
            && (!!this._ngControl.control.validator || !!this._ngControl.control.asyncValidator);
    }
    handleSelection(selectionData) {
        let newValue = this.extractRange(selectionData);
        if (!newValue.start && !newValue.end) {
            newValue = null;
        }
        this.value = newValue;
        if (this.isDropdown && (selectionData === null || selectionData === void 0 ? void 0 : selectionData.length) > 1) {
            this.close();
        }
    }
    handleClosing(e) {
        const args = { owner: this, cancel: e === null || e === void 0 ? void 0 : e.cancel, event: e === null || e === void 0 ? void 0 : e.event };
        this.closing.emit(args);
        e.cancel = args.cancel;
        if (args.cancel) {
            return;
        }
        if (this.isDropdown && (e === null || e === void 0 ? void 0 : e.event) && !this.element.nativeElement.contains(e.event.target)) {
            // outside click
            this.updateValidityOnBlur();
        }
        else {
            this.onTouchCallback();
            // input click
            if (this.hasProjectedInputs && this._focusedInput) {
                this._focusedInput.setFocus();
                this._focusedInput = null;
            }
            if (this.inputDirective) {
                this.inputDirective.focus();
            }
        }
    }
    subscribeToOverlayEvents() {
        this._overlayService.opening.pipe(...this._overlaySubFilter).subscribe((e) => {
            const overlayEvent = e;
            const args = { owner: this, cancel: overlayEvent === null || overlayEvent === void 0 ? void 0 : overlayEvent.cancel, event: e.event };
            this.opening.emit(args);
            if (args.cancel) {
                this._overlayService.detach(this._overlayId);
                overlayEvent.cancel = true;
                return;
            }
            this._initializeCalendarContainer(e.componentRef.instance);
            this._collapsed = false;
            this.updateCalendar();
        });
        this._overlayService.opened.pipe(...this._overlaySubFilter).subscribe(() => {
            var _a, _b;
            (_b = (_a = this.calendar) === null || _a === void 0 ? void 0 : _a.daysView) === null || _b === void 0 ? void 0 : _b.focusActiveDate();
            this.opened.emit({ owner: this });
        });
        this._overlayService.closing.pipe(...this._overlaySubFilter).subscribe((e) => {
            this.handleClosing(e);
        });
        this._overlayService.closed.pipe(...this._overlaySubFilter).subscribe(() => {
            this._overlayService.detach(this._overlayId);
            this._collapsed = true;
            this._overlayId = null;
            this.closed.emit({ owner: this });
        });
    }
    updateValue(value) {
        this._value = value ? value : null;
        this.updateInputs();
        this.updateCalendar();
    }
    updateValidityOnBlur() {
        this.onTouchCallback();
        if (this._ngControl) {
            if (this.hasProjectedInputs) {
                this.projectedInputs.forEach(i => {
                    if (!this._ngControl.valid) {
                        i.updateInputValidity(IgxInputState.INVALID);
                    }
                    else {
                        i.updateInputValidity(IgxInputState.INITIAL);
                    }
                });
            }
            if (this.inputDirective) {
                if (!this._ngControl.valid) {
                    this.inputDirective.valid = IgxInputState.INVALID;
                }
                else {
                    this.inputDirective.valid = IgxInputState.INITIAL;
                }
            }
        }
    }
    updateDisabledState() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            start.inputDirective.disabled = this.disabled;
            end.inputDirective.disabled = this.disabled;
            return;
        }
    }
    getInputState(focused) {
        if (focused) {
            return this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
        }
        else {
            return this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
        }
    }
    setRequiredToInputs() {
        // workaround for igxInput setting required
        Promise.resolve().then(() => {
            const isRequired = this.required;
            if (this.inputGroup && this.inputGroup.isRequired !== isRequired) {
                this.inputGroup.isRequired = isRequired;
            }
            else if (this.hasProjectedInputs && this._ngControl) {
                this.projectedInputs.forEach(i => i.isRequired = isRequired);
            }
        });
    }
    parseMinValue(value) {
        let minValue = parseDate(value);
        if (!minValue && this.hasProjectedInputs) {
            const start = this.projectedInputs.filter(i => i instanceof IgxDateRangeStartComponent)[0];
            if (start) {
                minValue = parseDate(start.dateTimeEditor.minValue);
            }
        }
        return minValue;
    }
    parseMaxValue(value) {
        let maxValue = parseDate(value);
        if (!maxValue && this.projectedInputs) {
            const end = this.projectedInputs.filter(i => i instanceof IgxDateRangeEndComponent)[0];
            if (end) {
                maxValue = parseDate(end.dateTimeEditor.maxValue);
            }
        }
        return maxValue;
    }
    updateCalendar() {
        var _a, _b;
        if (!this.calendar) {
            return;
        }
        this.calendar.disabledDates = [];
        const minValue = this.parseMinValue(this.minValue);
        if (minValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.Before, dateRange: [minValue] });
        }
        const maxValue = this.parseMaxValue(this.maxValue);
        if (maxValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.After, dateRange: [maxValue] });
        }
        const range = [];
        if (((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.end)) {
            const _value = this.toRangeOfDates(this.value);
            if (DateTimeUtil.greaterThanMaxValue(_value.start, _value.end)) {
                this.swapEditorDates();
            }
            if (this.valueInRange(this.value, minValue, maxValue)) {
                range.push(_value.start, _value.end);
            }
        }
        if (range.length > 0) {
            this.calendar.selectDate(range);
        }
        else if (range.length === 0 && this.calendar.monthViews) {
            this.calendar.deselectDate();
        }
        this.calendar.viewDate = range[0] || new Date();
    }
    swapEditorDates() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            [start.dateTimeEditor.value, end.dateTimeEditor.value] = [end.dateTimeEditor.value, start.dateTimeEditor.value];
            [this.value.start, this.value.end] = [this.value.end, this.value.start];
        }
    }
    valueInRange(value, minValue, maxValue) {
        const _value = this.toRangeOfDates(value);
        if (minValue && DateTimeUtil.lessThanMinValue(_value.start, minValue, false)) {
            return false;
        }
        if (maxValue && DateTimeUtil.greaterThanMaxValue(_value.end, maxValue, false)) {
            return false;
        }
        return true;
    }
    extractRange(selection) {
        return {
            start: selection[0] || null,
            end: selection.length > 0 ? selection[selection.length - 1] : null
        };
    }
    toRangeOfDates(range) {
        let start;
        let end;
        if (!isDate(range.start)) {
            start = DateTimeUtil.parseIsoDate(range.start);
        }
        if (!isDate(range.end)) {
            end = DateTimeUtil.parseIsoDate(range.end);
        }
        if (start || end) {
            return { start, end };
        }
        return { start: range.start, end: range.end };
    }
    subscribeToDateEditorEvents() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            if (start && end) {
                start.dateTimeEditor.valueChange
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(value => {
                    if (this.value) {
                        this.value = { start: value, end: this.value.end };
                    }
                    else {
                        this.value = { start: value, end: null };
                    }
                });
                end.dateTimeEditor.valueChange
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(value => {
                    if (this.value) {
                        this.value = { start: this.value.start, end: value };
                    }
                    else {
                        this.value = { start: null, end: value };
                    }
                });
            }
        }
    }
    attachOnTouched() {
        if (this.hasProjectedInputs) {
            this.projectedInputs.forEach(i => {
                fromEvent(i.dateTimeEditor.nativeElement, 'blur')
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(() => {
                    if (this.collapsed) {
                        this.updateValidityOnBlur();
                    }
                });
            });
        }
        else {
            fromEvent(this.inputDirective.nativeElement, 'blur')
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                if (this.collapsed) {
                    this.updateValidityOnBlur();
                }
            });
        }
    }
    cacheFocusedInput() {
        if (this.hasProjectedInputs) {
            this.projectedInputs.forEach(i => {
                fromEvent(i.dateTimeEditor.nativeElement, 'focus')
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(() => this._focusedInput = i);
            });
        }
    }
    configPositionStrategy() {
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this._dropDownOverlaySettings.positionStrategy = new AutoPositionStrategy(this._positionSettings);
        this._dropDownOverlaySettings.target = this.element.nativeElement;
    }
    configOverlaySettings() {
        if (this.overlaySettings !== null) {
            this._dropDownOverlaySettings = Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
            this._dialogOverlaySettings = Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
        }
    }
    initialSetValue() {
        // if there is no value and no ngControl on the picker but we have inputs we may have value set through
        // their ngModels - we should generate our initial control value
        if ((!this.value || (!this.value.start && !this.value.end)) && this.hasProjectedInputs && !this._ngControl) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            this._value = {
                start: start.dateTimeEditor.value,
                end: end.dateTimeEditor.value
            };
        }
    }
    updateInputs() {
        var _a, _b;
        const start = (_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.find(i => i instanceof IgxDateRangeStartComponent);
        const end = (_b = this.projectedInputs) === null || _b === void 0 ? void 0 : _b.find(i => i instanceof IgxDateRangeEndComponent);
        if (start && end) {
            const _value = this.value ? this.toRangeOfDates(this.value) : null;
            start.updateInputValue((_value === null || _value === void 0 ? void 0 : _value.start) || null);
            end.updateInputValue((_value === null || _value === void 0 ? void 0 : _value.end) || null);
        }
    }
    updateDisplayFormat() {
        this.projectedInputs.forEach(i => {
            const input = i;
            input.dateTimeEditor.displayFormat = this.displayFormat;
        });
    }
    updateInputFormat() {
        this.projectedInputs.forEach(i => {
            const input = i;
            if (input.dateTimeEditor.inputFormat !== this.inputFormat) {
                input.dateTimeEditor.inputFormat = this.inputFormat;
            }
        });
    }
    _initializeCalendarContainer(componentInstance) {
        this._calendar = componentInstance.calendar;
        this.calendar.hasHeader = false;
        this.calendar.locale = this.locale;
        this.calendar.selection = CalendarSelection.RANGE;
        this.calendar.weekStart = this.weekStart;
        this.calendar.hideOutsideDays = this.hideOutsideDays;
        this.calendar.monthsViewNumber = this.displayMonthsCount;
        this.calendar.selected.pipe(takeUntil(this._destroy$)).subscribe((ev) => this.handleSelection(ev));
        componentInstance.mode = this.mode;
        componentInstance.closeButtonLabel = !this.isDropdown ? this.doneButtonText : null;
        componentInstance.pickerActions = this.pickerActions;
        componentInstance.calendarClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.close());
    }
}
IgxDateRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-date-range-picker',
                template: "<ng-container *ngTemplateOutlet=\"this.hasProjectedInputs ? startEndTemplate : defTemplate\"></ng-container>\n\n<ng-template #singleTemplate>\n    <div (click)=\"this.open()\" class=\"content-wrap\">\n        <ng-content select=\"igx-date-single\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #startEndTemplate>\n    <ng-content select=\"igx-date-range-start\"></ng-content>\n    <div [className]=\"separatorClass\">\n        <ng-container *ngTemplateOutlet=\"dateSeparatorTemplate || defDateSeparatorTemplate;\">\n        </ng-container>\n    </div>\n    <ng-content select=\"igx-date-range-end\"></ng-content>\n</ng-template>\n\n<ng-template #defIcon>\n    <igx-icon>\n        date_range\n    </igx-icon>\n</ng-template>\n\n<ng-template #defDateSeparatorTemplate>{{ dateSeparator }}</ng-template>\n\n<ng-template #defTemplate>\n    <igx-input-group [type]=\"this.type\" [displayDensity]=\"this.displayDensity\" (click)=\"this.open()\">\n        <!-- only set mask placeholder when empty, otherwise input group might use it as label if none is set -->\n        <input #singleInput igxInput type=\"text\" readonly [disabled]=\"this.disabled\" [placeholder]=\"this.value ? '' : singleInputFormat\"\n            role=\"combobox\" aria-haspopup=\"grid\" [attr.aria-expanded]=\"!this.collapsed\" [attr.aria-labelledby]=\"this.label?.id\"\n            [value]=\"this.value | dateRange: this.appliedFormat : this.locale : this.formatter\" />\n\n        <igx-prefix *ngIf=\"!this.toggleComponents.length\">\n            <ng-container *ngTemplateOutlet=\"defIcon\"></ng-container>\n        </igx-prefix>\n\n        <ng-container ngProjectAs=\"[igxLabel]\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-prefix\">\n            <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-suffix\">\n            <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-hint\">\n            <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n        </ng-container>\n    </igx-input-group>\n</ng-template>\n",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateRangePickerComponent, multi: true },
                    { provide: NG_VALIDATORS, useExisting: IgxDateRangePickerComponent, multi: true }
                ]
            },] }
];
IgxDateRangePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: PlatformUtil },
    { type: Injector },
    { type: NgModuleRef },
    { type: ChangeDetectorRef },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [IGX_INPUT_GROUP_TYPE,] }] }
];
IgxDateRangePickerComponent.propDecorators = {
    displayMonthsCount: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    weekStart: [{ type: Input }],
    locale: [{ type: Input }],
    formatter: [{ type: Input }],
    doneButtonText: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    displayFormat: [{ type: Input }],
    inputFormat: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    resourceStrings: [{ type: Input }],
    placeholder: [{ type: Input }],
    outlet: [{ type: Input }],
    valueChange: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['class.igx-date-range-picker',] }],
    inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent,] }],
    inputDirective: [{ type: ViewChild, args: [IgxInputDirective,] }],
    projectedInputs: [{ type: ContentChildren, args: [IgxDateRangeInputsBaseComponent,] }],
    label: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    pickerActions: [{ type: ContentChild, args: [IgxPickerActionsDirective,] }],
    dateSeparatorTemplate: [{ type: ContentChild, args: [IgxDateRangeSeparatorDirective, { read: TemplateRef },] }],
    value: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,