import { QueryList, ChangeDetectorRef, DoCheck, ElementRef } from '@angular/core';
import { IgxColumnComponent } from '../columns/column.component';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { GridBaseAPIService } from '../api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { IgxGridHeaderComponent } from './grid-header.component';
import { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';
import { GridType } from '../common/grid.interface';
import { PlatformUtil } from '../../core/utils';
/**
 * @hidden
 */
export declare class IgxGridHeaderGroupComponent implements DoCheck {
    private cdr;
    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;
    private ref;
    colResizingService: IgxColumnResizingService;
    filteringService: IgxFilteringService;
    protected platform: PlatformUtil;
    get gridRowSpan(): number;
    get gridColumnSpan(): number;
    get rowEnd(): number;
    get colEnd(): number;
    get rowStart(): number;
    get colStart(): number;
    get headerID(): string;
    /**
     * Gets the column of the header group.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    column: IgxColumnComponent;
    get active(): boolean;
    get activeGroup(): boolean;
    /**
     * @hidden
     */
    header: IgxGridHeaderComponent;
    /**
     * @hidden
     */
    filter: IgxGridFilteringCellComponent;
    /**
     * @hidden
     */
    children: QueryList<IgxGridHeaderGroupComponent>;
    /**
     * Gets the width of the header group.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get width(): any;
    defaultCss: boolean;
    constructor(cdr: ChangeDetectorRef, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, ref: ElementRef<HTMLElement>, colResizingService: IgxColumnResizingService, filteringService: IgxFilteringService, platform: PlatformUtil);
    get pinnedCss(): boolean;
    get pinnedLastCss(): boolean;
    get pinnedFirstCSS(): boolean;
    get headerDragCss(): boolean;
    get filteringCss(): boolean;
    /**
     * @hidden
     */
    get zIndex(): number;
    /**
     * Gets the grid of the header group.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get grid(): any;
    /**
     * Gets whether the header group belongs to a column that is filtered.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get isFiltered(): boolean;
    /**
     * Gets whether the header group is stored in the last column in the pinned area.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get isLastPinned(): boolean;
    /**
     * Gets whether the header group is stored in the first column of the right pinned area.
     */
    get isFirstPinned(): boolean;
    get groupDisplayStyle(): string;
    /**
     * Gets whether the header group is stored in a pinned column.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get isPinned(): boolean;
    /**
     * Gets whether the header group belongs to a column that is moved.
     *
     * @memberof IgxGridHeaderGroupComponent
     */
    get isHeaderDragged(): boolean;
    /**
     * @hidden
     */
    get hasLastPinnedChildColumn(): boolean;
    /**
     * @hidden
     */
    get hasFirstPinnedChildColumn(): boolean;
    /**
     * @hidden
     */
    get selectable(): boolean;
    /**
     * @hidden
     */
    get selected(): boolean;
    /**
     * @hidden
     */
    get height(): number;
    /**
     * @hidden
     */
    get title(): string;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    onMouseDown(event: MouseEvent): void;
    /**
     * @hidden
     */
    groupClicked(event: MouseEvent): void;
    /**
     * @hidden @internal
     */
    toggleExpandState(event: MouseEvent): void;
    /**
     * @hidden @internal
     */
    pointerdown(event: PointerEvent): void;
    activate(): void;
    ngDoCheck(): void;
    /**
     * @hidden
     */
    onPinterEnter(): void;
    /**
     * @hidden
     */
    onPointerLeave(): void;
    private get activeNode();
}
